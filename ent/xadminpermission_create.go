// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wgbbiao/xadminent/ent/xadmincontenttype"
	"github.com/wgbbiao/xadminent/ent/xadminpermission"
	"github.com/wgbbiao/xadminent/ent/xadminrole"
	"github.com/wgbbiao/xadminent/ent/xadminuser"
)

// XadminPermissionCreate is the builder for creating a XadminPermission entity.
type XadminPermissionCreate struct {
	config
	mutation *XadminPermissionMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (xpc *XadminPermissionCreate) SetName(s string) *XadminPermissionCreate {
	xpc.mutation.SetName(s)
	return xpc
}

// SetCode sets the "code" field.
func (xpc *XadminPermissionCreate) SetCode(s string) *XadminPermissionCreate {
	xpc.mutation.SetCode(s)
	return xpc
}

// SetCreatedAt sets the "created_at" field.
func (xpc *XadminPermissionCreate) SetCreatedAt(t time.Time) *XadminPermissionCreate {
	xpc.mutation.SetCreatedAt(t)
	return xpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (xpc *XadminPermissionCreate) SetNillableCreatedAt(t *time.Time) *XadminPermissionCreate {
	if t != nil {
		xpc.SetCreatedAt(*t)
	}
	return xpc
}

// SetUpdatedAt sets the "updated_at" field.
func (xpc *XadminPermissionCreate) SetUpdatedAt(t time.Time) *XadminPermissionCreate {
	xpc.mutation.SetUpdatedAt(t)
	return xpc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (xpc *XadminPermissionCreate) SetNillableUpdatedAt(t *time.Time) *XadminPermissionCreate {
	if t != nil {
		xpc.SetUpdatedAt(*t)
	}
	return xpc
}

// SetXadminPermissionContentType sets the "xadmin_permission_content_type" field.
func (xpc *XadminPermissionCreate) SetXadminPermissionContentType(i int) *XadminPermissionCreate {
	xpc.mutation.SetXadminPermissionContentType(i)
	return xpc
}

// SetNillableXadminPermissionContentType sets the "xadmin_permission_content_type" field if the given value is not nil.
func (xpc *XadminPermissionCreate) SetNillableXadminPermissionContentType(i *int) *XadminPermissionCreate {
	if i != nil {
		xpc.SetXadminPermissionContentType(*i)
	}
	return xpc
}

// SetContentTypeID sets the "ContentType" edge to the XadminContenttype entity by ID.
func (xpc *XadminPermissionCreate) SetContentTypeID(id int) *XadminPermissionCreate {
	xpc.mutation.SetContentTypeID(id)
	return xpc
}

// SetNillableContentTypeID sets the "ContentType" edge to the XadminContenttype entity by ID if the given value is not nil.
func (xpc *XadminPermissionCreate) SetNillableContentTypeID(id *int) *XadminPermissionCreate {
	if id != nil {
		xpc = xpc.SetContentTypeID(*id)
	}
	return xpc
}

// SetContentType sets the "ContentType" edge to the XadminContenttype entity.
func (xpc *XadminPermissionCreate) SetContentType(x *XadminContenttype) *XadminPermissionCreate {
	return xpc.SetContentTypeID(x.ID)
}

// AddUserIDs adds the "users" edge to the XadminUser entity by IDs.
func (xpc *XadminPermissionCreate) AddUserIDs(ids ...int) *XadminPermissionCreate {
	xpc.mutation.AddUserIDs(ids...)
	return xpc
}

// AddUsers adds the "users" edges to the XadminUser entity.
func (xpc *XadminPermissionCreate) AddUsers(x ...*XadminUser) *XadminPermissionCreate {
	ids := make([]int, len(x))
	for i := range x {
		ids[i] = x[i].ID
	}
	return xpc.AddUserIDs(ids...)
}

// AddRoleIDs adds the "roles" edge to the XadminRole entity by IDs.
func (xpc *XadminPermissionCreate) AddRoleIDs(ids ...int) *XadminPermissionCreate {
	xpc.mutation.AddRoleIDs(ids...)
	return xpc
}

// AddRoles adds the "roles" edges to the XadminRole entity.
func (xpc *XadminPermissionCreate) AddRoles(x ...*XadminRole) *XadminPermissionCreate {
	ids := make([]int, len(x))
	for i := range x {
		ids[i] = x[i].ID
	}
	return xpc.AddRoleIDs(ids...)
}

// Mutation returns the XadminPermissionMutation object of the builder.
func (xpc *XadminPermissionCreate) Mutation() *XadminPermissionMutation {
	return xpc.mutation
}

// Save creates the XadminPermission in the database.
func (xpc *XadminPermissionCreate) Save(ctx context.Context) (*XadminPermission, error) {
	var (
		err  error
		node *XadminPermission
	)
	xpc.defaults()
	if len(xpc.hooks) == 0 {
		if err = xpc.check(); err != nil {
			return nil, err
		}
		node, err = xpc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*XadminPermissionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = xpc.check(); err != nil {
				return nil, err
			}
			xpc.mutation = mutation
			if node, err = xpc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(xpc.hooks) - 1; i >= 0; i-- {
			if xpc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = xpc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, xpc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (xpc *XadminPermissionCreate) SaveX(ctx context.Context) *XadminPermission {
	v, err := xpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (xpc *XadminPermissionCreate) Exec(ctx context.Context) error {
	_, err := xpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (xpc *XadminPermissionCreate) ExecX(ctx context.Context) {
	if err := xpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (xpc *XadminPermissionCreate) defaults() {
	if _, ok := xpc.mutation.CreatedAt(); !ok {
		v := xadminpermission.DefaultCreatedAt()
		xpc.mutation.SetCreatedAt(v)
	}
	if _, ok := xpc.mutation.UpdatedAt(); !ok {
		v := xadminpermission.DefaultUpdatedAt()
		xpc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (xpc *XadminPermissionCreate) check() error {
	if _, ok := xpc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "XadminPermission.name"`)}
	}
	if v, ok := xpc.mutation.Name(); ok {
		if err := xadminpermission.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "XadminPermission.name": %w`, err)}
		}
	}
	if _, ok := xpc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "XadminPermission.code"`)}
	}
	if v, ok := xpc.mutation.Code(); ok {
		if err := xadminpermission.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "XadminPermission.code": %w`, err)}
		}
	}
	if _, ok := xpc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "XadminPermission.created_at"`)}
	}
	if _, ok := xpc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "XadminPermission.updated_at"`)}
	}
	return nil
}

func (xpc *XadminPermissionCreate) sqlSave(ctx context.Context) (*XadminPermission, error) {
	_node, _spec := xpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, xpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (xpc *XadminPermissionCreate) createSpec() (*XadminPermission, *sqlgraph.CreateSpec) {
	var (
		_node = &XadminPermission{config: xpc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: xadminpermission.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: xadminpermission.FieldID,
			},
		}
	)
	if value, ok := xpc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: xadminpermission.FieldName,
		})
		_node.Name = value
	}
	if value, ok := xpc.mutation.Code(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: xadminpermission.FieldCode,
		})
		_node.Code = value
	}
	if value, ok := xpc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: xadminpermission.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := xpc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: xadminpermission.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if nodes := xpc.mutation.ContentTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   xadminpermission.ContentTypeTable,
			Columns: []string{xadminpermission.ContentTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: xadmincontenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.XadminPermissionContentType = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := xpc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   xadminpermission.UsersTable,
			Columns: xadminpermission.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: xadminuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := xpc.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   xadminpermission.RolesTable,
			Columns: xadminpermission.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: xadminrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// XadminPermissionCreateBulk is the builder for creating many XadminPermission entities in bulk.
type XadminPermissionCreateBulk struct {
	config
	builders []*XadminPermissionCreate
}

// Save creates the XadminPermission entities in the database.
func (xpcb *XadminPermissionCreateBulk) Save(ctx context.Context) ([]*XadminPermission, error) {
	specs := make([]*sqlgraph.CreateSpec, len(xpcb.builders))
	nodes := make([]*XadminPermission, len(xpcb.builders))
	mutators := make([]Mutator, len(xpcb.builders))
	for i := range xpcb.builders {
		func(i int, root context.Context) {
			builder := xpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*XadminPermissionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, xpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, xpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, xpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (xpcb *XadminPermissionCreateBulk) SaveX(ctx context.Context) []*XadminPermission {
	v, err := xpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (xpcb *XadminPermissionCreateBulk) Exec(ctx context.Context) error {
	_, err := xpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (xpcb *XadminPermissionCreateBulk) ExecX(ctx context.Context) {
	if err := xpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
