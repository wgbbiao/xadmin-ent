// Code generated by entc, DO NOT EDIT.

package xadminuser

import (
	"time"
)

const (
	// Label holds the string label denoting the xadminuser type in the database.
	Label = "xadmin_user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldSalt holds the string denoting the salt field in the database.
	FieldSalt = "salt"
	// FieldIsSuper holds the string denoting the is_super field in the database.
	FieldIsSuper = "is_super"
	// FieldLastLoginAt holds the string denoting the last_login_at field in the database.
	FieldLastLoginAt = "last_login_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeRoles holds the string denoting the roles edge name in mutations.
	EdgeRoles = "roles"
	// EdgePermissions holds the string denoting the permissions edge name in mutations.
	EdgePermissions = "permissions"
	// Table holds the table name of the xadminuser in the database.
	Table = "xadmin_users"
	// RolesTable is the table that holds the roles relation/edge. The primary key declared below.
	RolesTable = "xadmin_role_users"
	// RolesInverseTable is the table name for the XadminRole entity.
	// It exists in this package in order to avoid circular dependency with the "xadminrole" package.
	RolesInverseTable = "xadmin_roles"
	// PermissionsTable is the table that holds the permissions relation/edge. The primary key declared below.
	PermissionsTable = "xadmin_permission_users"
	// PermissionsInverseTable is the table name for the XadminPermission entity.
	// It exists in this package in order to avoid circular dependency with the "xadminpermission" package.
	PermissionsInverseTable = "xadmin_permissions"
)

// Columns holds all SQL columns for xadminuser fields.
var Columns = []string{
	FieldID,
	FieldUsername,
	FieldPassword,
	FieldSalt,
	FieldIsSuper,
	FieldLastLoginAt,
	FieldCreatedAt,
	FieldUpdatedAt,
}

var (
	// RolesPrimaryKey and RolesColumn2 are the table columns denoting the
	// primary key for the roles relation (M2M).
	RolesPrimaryKey = []string{"xadmin_role_id", "xadmin_user_id"}
	// PermissionsPrimaryKey and PermissionsColumn2 are the table columns denoting the
	// primary key for the permissions relation (M2M).
	PermissionsPrimaryKey = []string{"xadmin_permission_id", "xadmin_user_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)
