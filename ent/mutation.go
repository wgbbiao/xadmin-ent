// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/wgbbiao/xadminent/ent/predicate"
	"github.com/wgbbiao/xadminent/ent/xadmincontenttype"
	"github.com/wgbbiao/xadminent/ent/xadminpermission"
	"github.com/wgbbiao/xadminent/ent/xadminrole"
	"github.com/wgbbiao/xadminent/ent/xadminuser"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeXadminContenttype = "XadminContenttype"
	TypeXadminPermission  = "XadminPermission"
	TypeXadminRole        = "XadminRole"
	TypeXadminUser        = "XadminUser"
)

// XadminContenttypeMutation represents an operation that mutates the XadminContenttype nodes in the graph.
type XadminContenttypeMutation struct {
	config
	op            Op
	typ           string
	id            *int
	created_at    *time.Time
	updated_at    *time.Time
	app_label     *string
	model         *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*XadminContenttype, error)
	predicates    []predicate.XadminContenttype
}

var _ ent.Mutation = (*XadminContenttypeMutation)(nil)

// xadmincontenttypeOption allows management of the mutation configuration using functional options.
type xadmincontenttypeOption func(*XadminContenttypeMutation)

// newXadminContenttypeMutation creates new mutation for the XadminContenttype entity.
func newXadminContenttypeMutation(c config, op Op, opts ...xadmincontenttypeOption) *XadminContenttypeMutation {
	m := &XadminContenttypeMutation{
		config:        c,
		op:            op,
		typ:           TypeXadminContenttype,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withXadminContenttypeID sets the ID field of the mutation.
func withXadminContenttypeID(id int) xadmincontenttypeOption {
	return func(m *XadminContenttypeMutation) {
		var (
			err   error
			once  sync.Once
			value *XadminContenttype
		)
		m.oldValue = func(ctx context.Context) (*XadminContenttype, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().XadminContenttype.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withXadminContenttype sets the old XadminContenttype of the mutation.
func withXadminContenttype(node *XadminContenttype) xadmincontenttypeOption {
	return func(m *XadminContenttypeMutation) {
		m.oldValue = func(context.Context) (*XadminContenttype, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m XadminContenttypeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m XadminContenttypeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *XadminContenttypeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *XadminContenttypeMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().XadminContenttype.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *XadminContenttypeMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *XadminContenttypeMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the XadminContenttype entity.
// If the XadminContenttype object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *XadminContenttypeMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *XadminContenttypeMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *XadminContenttypeMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *XadminContenttypeMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the XadminContenttype entity.
// If the XadminContenttype object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *XadminContenttypeMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *XadminContenttypeMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetAppLabel sets the "app_label" field.
func (m *XadminContenttypeMutation) SetAppLabel(s string) {
	m.app_label = &s
}

// AppLabel returns the value of the "app_label" field in the mutation.
func (m *XadminContenttypeMutation) AppLabel() (r string, exists bool) {
	v := m.app_label
	if v == nil {
		return
	}
	return *v, true
}

// OldAppLabel returns the old "app_label" field's value of the XadminContenttype entity.
// If the XadminContenttype object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *XadminContenttypeMutation) OldAppLabel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppLabel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppLabel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppLabel: %w", err)
	}
	return oldValue.AppLabel, nil
}

// ResetAppLabel resets all changes to the "app_label" field.
func (m *XadminContenttypeMutation) ResetAppLabel() {
	m.app_label = nil
}

// SetModel sets the "model" field.
func (m *XadminContenttypeMutation) SetModel(s string) {
	m.model = &s
}

// Model returns the value of the "model" field in the mutation.
func (m *XadminContenttypeMutation) Model() (r string, exists bool) {
	v := m.model
	if v == nil {
		return
	}
	return *v, true
}

// OldModel returns the old "model" field's value of the XadminContenttype entity.
// If the XadminContenttype object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *XadminContenttypeMutation) OldModel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModel: %w", err)
	}
	return oldValue.Model, nil
}

// ResetModel resets all changes to the "model" field.
func (m *XadminContenttypeMutation) ResetModel() {
	m.model = nil
}

// Where appends a list predicates to the XadminContenttypeMutation builder.
func (m *XadminContenttypeMutation) Where(ps ...predicate.XadminContenttype) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *XadminContenttypeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (XadminContenttype).
func (m *XadminContenttypeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *XadminContenttypeMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.created_at != nil {
		fields = append(fields, xadmincontenttype.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, xadmincontenttype.FieldUpdatedAt)
	}
	if m.app_label != nil {
		fields = append(fields, xadmincontenttype.FieldAppLabel)
	}
	if m.model != nil {
		fields = append(fields, xadmincontenttype.FieldModel)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *XadminContenttypeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case xadmincontenttype.FieldCreatedAt:
		return m.CreatedAt()
	case xadmincontenttype.FieldUpdatedAt:
		return m.UpdatedAt()
	case xadmincontenttype.FieldAppLabel:
		return m.AppLabel()
	case xadmincontenttype.FieldModel:
		return m.Model()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *XadminContenttypeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case xadmincontenttype.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case xadmincontenttype.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case xadmincontenttype.FieldAppLabel:
		return m.OldAppLabel(ctx)
	case xadmincontenttype.FieldModel:
		return m.OldModel(ctx)
	}
	return nil, fmt.Errorf("unknown XadminContenttype field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *XadminContenttypeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case xadmincontenttype.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case xadmincontenttype.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case xadmincontenttype.FieldAppLabel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppLabel(v)
		return nil
	case xadmincontenttype.FieldModel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModel(v)
		return nil
	}
	return fmt.Errorf("unknown XadminContenttype field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *XadminContenttypeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *XadminContenttypeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *XadminContenttypeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown XadminContenttype numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *XadminContenttypeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *XadminContenttypeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *XadminContenttypeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown XadminContenttype nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *XadminContenttypeMutation) ResetField(name string) error {
	switch name {
	case xadmincontenttype.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case xadmincontenttype.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case xadmincontenttype.FieldAppLabel:
		m.ResetAppLabel()
		return nil
	case xadmincontenttype.FieldModel:
		m.ResetModel()
		return nil
	}
	return fmt.Errorf("unknown XadminContenttype field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *XadminContenttypeMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *XadminContenttypeMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *XadminContenttypeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *XadminContenttypeMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *XadminContenttypeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *XadminContenttypeMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *XadminContenttypeMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown XadminContenttype unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *XadminContenttypeMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown XadminContenttype edge %s", name)
}

// XadminPermissionMutation represents an operation that mutates the XadminPermission nodes in the graph.
type XadminPermissionMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	created_at          *time.Time
	updated_at          *time.Time
	name                *string
	code                *string
	clearedFields       map[string]struct{}
	_ContentType        *int
	cleared_ContentType bool
	users               map[int]struct{}
	removedusers        map[int]struct{}
	clearedusers        bool
	roles               map[int]struct{}
	removedroles        map[int]struct{}
	clearedroles        bool
	done                bool
	oldValue            func(context.Context) (*XadminPermission, error)
	predicates          []predicate.XadminPermission
}

var _ ent.Mutation = (*XadminPermissionMutation)(nil)

// xadminpermissionOption allows management of the mutation configuration using functional options.
type xadminpermissionOption func(*XadminPermissionMutation)

// newXadminPermissionMutation creates new mutation for the XadminPermission entity.
func newXadminPermissionMutation(c config, op Op, opts ...xadminpermissionOption) *XadminPermissionMutation {
	m := &XadminPermissionMutation{
		config:        c,
		op:            op,
		typ:           TypeXadminPermission,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withXadminPermissionID sets the ID field of the mutation.
func withXadminPermissionID(id int) xadminpermissionOption {
	return func(m *XadminPermissionMutation) {
		var (
			err   error
			once  sync.Once
			value *XadminPermission
		)
		m.oldValue = func(ctx context.Context) (*XadminPermission, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().XadminPermission.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withXadminPermission sets the old XadminPermission of the mutation.
func withXadminPermission(node *XadminPermission) xadminpermissionOption {
	return func(m *XadminPermissionMutation) {
		m.oldValue = func(context.Context) (*XadminPermission, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m XadminPermissionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m XadminPermissionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *XadminPermissionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *XadminPermissionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().XadminPermission.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *XadminPermissionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *XadminPermissionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the XadminPermission entity.
// If the XadminPermission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *XadminPermissionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *XadminPermissionMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *XadminPermissionMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *XadminPermissionMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the XadminPermission entity.
// If the XadminPermission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *XadminPermissionMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *XadminPermissionMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetName sets the "name" field.
func (m *XadminPermissionMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *XadminPermissionMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the XadminPermission entity.
// If the XadminPermission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *XadminPermissionMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *XadminPermissionMutation) ResetName() {
	m.name = nil
}

// SetCode sets the "code" field.
func (m *XadminPermissionMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *XadminPermissionMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the XadminPermission entity.
// If the XadminPermission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *XadminPermissionMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *XadminPermissionMutation) ResetCode() {
	m.code = nil
}

// SetXadminPermissionContentType sets the "xadmin_permission_content_type" field.
func (m *XadminPermissionMutation) SetXadminPermissionContentType(i int) {
	m._ContentType = &i
}

// XadminPermissionContentType returns the value of the "xadmin_permission_content_type" field in the mutation.
func (m *XadminPermissionMutation) XadminPermissionContentType() (r int, exists bool) {
	v := m._ContentType
	if v == nil {
		return
	}
	return *v, true
}

// OldXadminPermissionContentType returns the old "xadmin_permission_content_type" field's value of the XadminPermission entity.
// If the XadminPermission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *XadminPermissionMutation) OldXadminPermissionContentType(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldXadminPermissionContentType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldXadminPermissionContentType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldXadminPermissionContentType: %w", err)
	}
	return oldValue.XadminPermissionContentType, nil
}

// ClearXadminPermissionContentType clears the value of the "xadmin_permission_content_type" field.
func (m *XadminPermissionMutation) ClearXadminPermissionContentType() {
	m._ContentType = nil
	m.clearedFields[xadminpermission.FieldXadminPermissionContentType] = struct{}{}
}

// XadminPermissionContentTypeCleared returns if the "xadmin_permission_content_type" field was cleared in this mutation.
func (m *XadminPermissionMutation) XadminPermissionContentTypeCleared() bool {
	_, ok := m.clearedFields[xadminpermission.FieldXadminPermissionContentType]
	return ok
}

// ResetXadminPermissionContentType resets all changes to the "xadmin_permission_content_type" field.
func (m *XadminPermissionMutation) ResetXadminPermissionContentType() {
	m._ContentType = nil
	delete(m.clearedFields, xadminpermission.FieldXadminPermissionContentType)
}

// SetContentTypeID sets the "ContentType" edge to the XadminContenttype entity by id.
func (m *XadminPermissionMutation) SetContentTypeID(id int) {
	m._ContentType = &id
}

// ClearContentType clears the "ContentType" edge to the XadminContenttype entity.
func (m *XadminPermissionMutation) ClearContentType() {
	m.cleared_ContentType = true
}

// ContentTypeCleared reports if the "ContentType" edge to the XadminContenttype entity was cleared.
func (m *XadminPermissionMutation) ContentTypeCleared() bool {
	return m.XadminPermissionContentTypeCleared() || m.cleared_ContentType
}

// ContentTypeID returns the "ContentType" edge ID in the mutation.
func (m *XadminPermissionMutation) ContentTypeID() (id int, exists bool) {
	if m._ContentType != nil {
		return *m._ContentType, true
	}
	return
}

// ContentTypeIDs returns the "ContentType" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ContentTypeID instead. It exists only for internal usage by the builders.
func (m *XadminPermissionMutation) ContentTypeIDs() (ids []int) {
	if id := m._ContentType; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetContentType resets all changes to the "ContentType" edge.
func (m *XadminPermissionMutation) ResetContentType() {
	m._ContentType = nil
	m.cleared_ContentType = false
}

// AddUserIDs adds the "users" edge to the XadminUser entity by ids.
func (m *XadminPermissionMutation) AddUserIDs(ids ...int) {
	if m.users == nil {
		m.users = make(map[int]struct{})
	}
	for i := range ids {
		m.users[ids[i]] = struct{}{}
	}
}

// ClearUsers clears the "users" edge to the XadminUser entity.
func (m *XadminPermissionMutation) ClearUsers() {
	m.clearedusers = true
}

// UsersCleared reports if the "users" edge to the XadminUser entity was cleared.
func (m *XadminPermissionMutation) UsersCleared() bool {
	return m.clearedusers
}

// RemoveUserIDs removes the "users" edge to the XadminUser entity by IDs.
func (m *XadminPermissionMutation) RemoveUserIDs(ids ...int) {
	if m.removedusers == nil {
		m.removedusers = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.users, ids[i])
		m.removedusers[ids[i]] = struct{}{}
	}
}

// RemovedUsers returns the removed IDs of the "users" edge to the XadminUser entity.
func (m *XadminPermissionMutation) RemovedUsersIDs() (ids []int) {
	for id := range m.removedusers {
		ids = append(ids, id)
	}
	return
}

// UsersIDs returns the "users" edge IDs in the mutation.
func (m *XadminPermissionMutation) UsersIDs() (ids []int) {
	for id := range m.users {
		ids = append(ids, id)
	}
	return
}

// ResetUsers resets all changes to the "users" edge.
func (m *XadminPermissionMutation) ResetUsers() {
	m.users = nil
	m.clearedusers = false
	m.removedusers = nil
}

// AddRoleIDs adds the "roles" edge to the XadminRole entity by ids.
func (m *XadminPermissionMutation) AddRoleIDs(ids ...int) {
	if m.roles == nil {
		m.roles = make(map[int]struct{})
	}
	for i := range ids {
		m.roles[ids[i]] = struct{}{}
	}
}

// ClearRoles clears the "roles" edge to the XadminRole entity.
func (m *XadminPermissionMutation) ClearRoles() {
	m.clearedroles = true
}

// RolesCleared reports if the "roles" edge to the XadminRole entity was cleared.
func (m *XadminPermissionMutation) RolesCleared() bool {
	return m.clearedroles
}

// RemoveRoleIDs removes the "roles" edge to the XadminRole entity by IDs.
func (m *XadminPermissionMutation) RemoveRoleIDs(ids ...int) {
	if m.removedroles == nil {
		m.removedroles = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.roles, ids[i])
		m.removedroles[ids[i]] = struct{}{}
	}
}

// RemovedRoles returns the removed IDs of the "roles" edge to the XadminRole entity.
func (m *XadminPermissionMutation) RemovedRolesIDs() (ids []int) {
	for id := range m.removedroles {
		ids = append(ids, id)
	}
	return
}

// RolesIDs returns the "roles" edge IDs in the mutation.
func (m *XadminPermissionMutation) RolesIDs() (ids []int) {
	for id := range m.roles {
		ids = append(ids, id)
	}
	return
}

// ResetRoles resets all changes to the "roles" edge.
func (m *XadminPermissionMutation) ResetRoles() {
	m.roles = nil
	m.clearedroles = false
	m.removedroles = nil
}

// Where appends a list predicates to the XadminPermissionMutation builder.
func (m *XadminPermissionMutation) Where(ps ...predicate.XadminPermission) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *XadminPermissionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (XadminPermission).
func (m *XadminPermissionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *XadminPermissionMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.created_at != nil {
		fields = append(fields, xadminpermission.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, xadminpermission.FieldUpdatedAt)
	}
	if m.name != nil {
		fields = append(fields, xadminpermission.FieldName)
	}
	if m.code != nil {
		fields = append(fields, xadminpermission.FieldCode)
	}
	if m._ContentType != nil {
		fields = append(fields, xadminpermission.FieldXadminPermissionContentType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *XadminPermissionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case xadminpermission.FieldCreatedAt:
		return m.CreatedAt()
	case xadminpermission.FieldUpdatedAt:
		return m.UpdatedAt()
	case xadminpermission.FieldName:
		return m.Name()
	case xadminpermission.FieldCode:
		return m.Code()
	case xadminpermission.FieldXadminPermissionContentType:
		return m.XadminPermissionContentType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *XadminPermissionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case xadminpermission.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case xadminpermission.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case xadminpermission.FieldName:
		return m.OldName(ctx)
	case xadminpermission.FieldCode:
		return m.OldCode(ctx)
	case xadminpermission.FieldXadminPermissionContentType:
		return m.OldXadminPermissionContentType(ctx)
	}
	return nil, fmt.Errorf("unknown XadminPermission field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *XadminPermissionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case xadminpermission.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case xadminpermission.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case xadminpermission.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case xadminpermission.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case xadminpermission.FieldXadminPermissionContentType:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetXadminPermissionContentType(v)
		return nil
	}
	return fmt.Errorf("unknown XadminPermission field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *XadminPermissionMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *XadminPermissionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *XadminPermissionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown XadminPermission numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *XadminPermissionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(xadminpermission.FieldXadminPermissionContentType) {
		fields = append(fields, xadminpermission.FieldXadminPermissionContentType)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *XadminPermissionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *XadminPermissionMutation) ClearField(name string) error {
	switch name {
	case xadminpermission.FieldXadminPermissionContentType:
		m.ClearXadminPermissionContentType()
		return nil
	}
	return fmt.Errorf("unknown XadminPermission nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *XadminPermissionMutation) ResetField(name string) error {
	switch name {
	case xadminpermission.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case xadminpermission.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case xadminpermission.FieldName:
		m.ResetName()
		return nil
	case xadminpermission.FieldCode:
		m.ResetCode()
		return nil
	case xadminpermission.FieldXadminPermissionContentType:
		m.ResetXadminPermissionContentType()
		return nil
	}
	return fmt.Errorf("unknown XadminPermission field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *XadminPermissionMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m._ContentType != nil {
		edges = append(edges, xadminpermission.EdgeContentType)
	}
	if m.users != nil {
		edges = append(edges, xadminpermission.EdgeUsers)
	}
	if m.roles != nil {
		edges = append(edges, xadminpermission.EdgeRoles)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *XadminPermissionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case xadminpermission.EdgeContentType:
		if id := m._ContentType; id != nil {
			return []ent.Value{*id}
		}
	case xadminpermission.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.users))
		for id := range m.users {
			ids = append(ids, id)
		}
		return ids
	case xadminpermission.EdgeRoles:
		ids := make([]ent.Value, 0, len(m.roles))
		for id := range m.roles {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *XadminPermissionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedusers != nil {
		edges = append(edges, xadminpermission.EdgeUsers)
	}
	if m.removedroles != nil {
		edges = append(edges, xadminpermission.EdgeRoles)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *XadminPermissionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case xadminpermission.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.removedusers))
		for id := range m.removedusers {
			ids = append(ids, id)
		}
		return ids
	case xadminpermission.EdgeRoles:
		ids := make([]ent.Value, 0, len(m.removedroles))
		for id := range m.removedroles {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *XadminPermissionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleared_ContentType {
		edges = append(edges, xadminpermission.EdgeContentType)
	}
	if m.clearedusers {
		edges = append(edges, xadminpermission.EdgeUsers)
	}
	if m.clearedroles {
		edges = append(edges, xadminpermission.EdgeRoles)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *XadminPermissionMutation) EdgeCleared(name string) bool {
	switch name {
	case xadminpermission.EdgeContentType:
		return m.cleared_ContentType
	case xadminpermission.EdgeUsers:
		return m.clearedusers
	case xadminpermission.EdgeRoles:
		return m.clearedroles
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *XadminPermissionMutation) ClearEdge(name string) error {
	switch name {
	case xadminpermission.EdgeContentType:
		m.ClearContentType()
		return nil
	}
	return fmt.Errorf("unknown XadminPermission unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *XadminPermissionMutation) ResetEdge(name string) error {
	switch name {
	case xadminpermission.EdgeContentType:
		m.ResetContentType()
		return nil
	case xadminpermission.EdgeUsers:
		m.ResetUsers()
		return nil
	case xadminpermission.EdgeRoles:
		m.ResetRoles()
		return nil
	}
	return fmt.Errorf("unknown XadminPermission edge %s", name)
}

// XadminRoleMutation represents an operation that mutates the XadminRole nodes in the graph.
type XadminRoleMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	created_at         *time.Time
	updated_at         *time.Time
	name               *string
	clearedFields      map[string]struct{}
	users              map[int]struct{}
	removedusers       map[int]struct{}
	clearedusers       bool
	permissions        map[int]struct{}
	removedpermissions map[int]struct{}
	clearedpermissions bool
	done               bool
	oldValue           func(context.Context) (*XadminRole, error)
	predicates         []predicate.XadminRole
}

var _ ent.Mutation = (*XadminRoleMutation)(nil)

// xadminroleOption allows management of the mutation configuration using functional options.
type xadminroleOption func(*XadminRoleMutation)

// newXadminRoleMutation creates new mutation for the XadminRole entity.
func newXadminRoleMutation(c config, op Op, opts ...xadminroleOption) *XadminRoleMutation {
	m := &XadminRoleMutation{
		config:        c,
		op:            op,
		typ:           TypeXadminRole,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withXadminRoleID sets the ID field of the mutation.
func withXadminRoleID(id int) xadminroleOption {
	return func(m *XadminRoleMutation) {
		var (
			err   error
			once  sync.Once
			value *XadminRole
		)
		m.oldValue = func(ctx context.Context) (*XadminRole, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().XadminRole.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withXadminRole sets the old XadminRole of the mutation.
func withXadminRole(node *XadminRole) xadminroleOption {
	return func(m *XadminRoleMutation) {
		m.oldValue = func(context.Context) (*XadminRole, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m XadminRoleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m XadminRoleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *XadminRoleMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *XadminRoleMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().XadminRole.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *XadminRoleMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *XadminRoleMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the XadminRole entity.
// If the XadminRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *XadminRoleMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *XadminRoleMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *XadminRoleMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *XadminRoleMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the XadminRole entity.
// If the XadminRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *XadminRoleMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *XadminRoleMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetName sets the "name" field.
func (m *XadminRoleMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *XadminRoleMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the XadminRole entity.
// If the XadminRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *XadminRoleMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *XadminRoleMutation) ResetName() {
	m.name = nil
}

// AddUserIDs adds the "users" edge to the XadminUser entity by ids.
func (m *XadminRoleMutation) AddUserIDs(ids ...int) {
	if m.users == nil {
		m.users = make(map[int]struct{})
	}
	for i := range ids {
		m.users[ids[i]] = struct{}{}
	}
}

// ClearUsers clears the "users" edge to the XadminUser entity.
func (m *XadminRoleMutation) ClearUsers() {
	m.clearedusers = true
}

// UsersCleared reports if the "users" edge to the XadminUser entity was cleared.
func (m *XadminRoleMutation) UsersCleared() bool {
	return m.clearedusers
}

// RemoveUserIDs removes the "users" edge to the XadminUser entity by IDs.
func (m *XadminRoleMutation) RemoveUserIDs(ids ...int) {
	if m.removedusers == nil {
		m.removedusers = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.users, ids[i])
		m.removedusers[ids[i]] = struct{}{}
	}
}

// RemovedUsers returns the removed IDs of the "users" edge to the XadminUser entity.
func (m *XadminRoleMutation) RemovedUsersIDs() (ids []int) {
	for id := range m.removedusers {
		ids = append(ids, id)
	}
	return
}

// UsersIDs returns the "users" edge IDs in the mutation.
func (m *XadminRoleMutation) UsersIDs() (ids []int) {
	for id := range m.users {
		ids = append(ids, id)
	}
	return
}

// ResetUsers resets all changes to the "users" edge.
func (m *XadminRoleMutation) ResetUsers() {
	m.users = nil
	m.clearedusers = false
	m.removedusers = nil
}

// AddPermissionIDs adds the "permissions" edge to the XadminPermission entity by ids.
func (m *XadminRoleMutation) AddPermissionIDs(ids ...int) {
	if m.permissions == nil {
		m.permissions = make(map[int]struct{})
	}
	for i := range ids {
		m.permissions[ids[i]] = struct{}{}
	}
}

// ClearPermissions clears the "permissions" edge to the XadminPermission entity.
func (m *XadminRoleMutation) ClearPermissions() {
	m.clearedpermissions = true
}

// PermissionsCleared reports if the "permissions" edge to the XadminPermission entity was cleared.
func (m *XadminRoleMutation) PermissionsCleared() bool {
	return m.clearedpermissions
}

// RemovePermissionIDs removes the "permissions" edge to the XadminPermission entity by IDs.
func (m *XadminRoleMutation) RemovePermissionIDs(ids ...int) {
	if m.removedpermissions == nil {
		m.removedpermissions = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.permissions, ids[i])
		m.removedpermissions[ids[i]] = struct{}{}
	}
}

// RemovedPermissions returns the removed IDs of the "permissions" edge to the XadminPermission entity.
func (m *XadminRoleMutation) RemovedPermissionsIDs() (ids []int) {
	for id := range m.removedpermissions {
		ids = append(ids, id)
	}
	return
}

// PermissionsIDs returns the "permissions" edge IDs in the mutation.
func (m *XadminRoleMutation) PermissionsIDs() (ids []int) {
	for id := range m.permissions {
		ids = append(ids, id)
	}
	return
}

// ResetPermissions resets all changes to the "permissions" edge.
func (m *XadminRoleMutation) ResetPermissions() {
	m.permissions = nil
	m.clearedpermissions = false
	m.removedpermissions = nil
}

// Where appends a list predicates to the XadminRoleMutation builder.
func (m *XadminRoleMutation) Where(ps ...predicate.XadminRole) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *XadminRoleMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (XadminRole).
func (m *XadminRoleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *XadminRoleMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.created_at != nil {
		fields = append(fields, xadminrole.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, xadminrole.FieldUpdatedAt)
	}
	if m.name != nil {
		fields = append(fields, xadminrole.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *XadminRoleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case xadminrole.FieldCreatedAt:
		return m.CreatedAt()
	case xadminrole.FieldUpdatedAt:
		return m.UpdatedAt()
	case xadminrole.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *XadminRoleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case xadminrole.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case xadminrole.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case xadminrole.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown XadminRole field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *XadminRoleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case xadminrole.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case xadminrole.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case xadminrole.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown XadminRole field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *XadminRoleMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *XadminRoleMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *XadminRoleMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown XadminRole numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *XadminRoleMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *XadminRoleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *XadminRoleMutation) ClearField(name string) error {
	return fmt.Errorf("unknown XadminRole nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *XadminRoleMutation) ResetField(name string) error {
	switch name {
	case xadminrole.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case xadminrole.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case xadminrole.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown XadminRole field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *XadminRoleMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.users != nil {
		edges = append(edges, xadminrole.EdgeUsers)
	}
	if m.permissions != nil {
		edges = append(edges, xadminrole.EdgePermissions)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *XadminRoleMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case xadminrole.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.users))
		for id := range m.users {
			ids = append(ids, id)
		}
		return ids
	case xadminrole.EdgePermissions:
		ids := make([]ent.Value, 0, len(m.permissions))
		for id := range m.permissions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *XadminRoleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedusers != nil {
		edges = append(edges, xadminrole.EdgeUsers)
	}
	if m.removedpermissions != nil {
		edges = append(edges, xadminrole.EdgePermissions)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *XadminRoleMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case xadminrole.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.removedusers))
		for id := range m.removedusers {
			ids = append(ids, id)
		}
		return ids
	case xadminrole.EdgePermissions:
		ids := make([]ent.Value, 0, len(m.removedpermissions))
		for id := range m.removedpermissions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *XadminRoleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedusers {
		edges = append(edges, xadminrole.EdgeUsers)
	}
	if m.clearedpermissions {
		edges = append(edges, xadminrole.EdgePermissions)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *XadminRoleMutation) EdgeCleared(name string) bool {
	switch name {
	case xadminrole.EdgeUsers:
		return m.clearedusers
	case xadminrole.EdgePermissions:
		return m.clearedpermissions
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *XadminRoleMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown XadminRole unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *XadminRoleMutation) ResetEdge(name string) error {
	switch name {
	case xadminrole.EdgeUsers:
		m.ResetUsers()
		return nil
	case xadminrole.EdgePermissions:
		m.ResetPermissions()
		return nil
	}
	return fmt.Errorf("unknown XadminRole edge %s", name)
}

// XadminUserMutation represents an operation that mutates the XadminUser nodes in the graph.
type XadminUserMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	created_at         *time.Time
	updated_at         *time.Time
	username           *string
	password           *string
	salt               *string
	is_super           *bool
	last_login_at      *time.Time
	clearedFields      map[string]struct{}
	roles              map[int]struct{}
	removedroles       map[int]struct{}
	clearedroles       bool
	permissions        map[int]struct{}
	removedpermissions map[int]struct{}
	clearedpermissions bool
	done               bool
	oldValue           func(context.Context) (*XadminUser, error)
	predicates         []predicate.XadminUser
}

var _ ent.Mutation = (*XadminUserMutation)(nil)

// xadminuserOption allows management of the mutation configuration using functional options.
type xadminuserOption func(*XadminUserMutation)

// newXadminUserMutation creates new mutation for the XadminUser entity.
func newXadminUserMutation(c config, op Op, opts ...xadminuserOption) *XadminUserMutation {
	m := &XadminUserMutation{
		config:        c,
		op:            op,
		typ:           TypeXadminUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withXadminUserID sets the ID field of the mutation.
func withXadminUserID(id int) xadminuserOption {
	return func(m *XadminUserMutation) {
		var (
			err   error
			once  sync.Once
			value *XadminUser
		)
		m.oldValue = func(ctx context.Context) (*XadminUser, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().XadminUser.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withXadminUser sets the old XadminUser of the mutation.
func withXadminUser(node *XadminUser) xadminuserOption {
	return func(m *XadminUserMutation) {
		m.oldValue = func(context.Context) (*XadminUser, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m XadminUserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m XadminUserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *XadminUserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *XadminUserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().XadminUser.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *XadminUserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *XadminUserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the XadminUser entity.
// If the XadminUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *XadminUserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *XadminUserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *XadminUserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *XadminUserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the XadminUser entity.
// If the XadminUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *XadminUserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *XadminUserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetUsername sets the "username" field.
func (m *XadminUserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *XadminUserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the XadminUser entity.
// If the XadminUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *XadminUserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *XadminUserMutation) ResetUsername() {
	m.username = nil
}

// SetPassword sets the "password" field.
func (m *XadminUserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *XadminUserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the XadminUser entity.
// If the XadminUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *XadminUserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *XadminUserMutation) ResetPassword() {
	m.password = nil
}

// SetSalt sets the "salt" field.
func (m *XadminUserMutation) SetSalt(s string) {
	m.salt = &s
}

// Salt returns the value of the "salt" field in the mutation.
func (m *XadminUserMutation) Salt() (r string, exists bool) {
	v := m.salt
	if v == nil {
		return
	}
	return *v, true
}

// OldSalt returns the old "salt" field's value of the XadminUser entity.
// If the XadminUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *XadminUserMutation) OldSalt(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSalt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSalt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSalt: %w", err)
	}
	return oldValue.Salt, nil
}

// ResetSalt resets all changes to the "salt" field.
func (m *XadminUserMutation) ResetSalt() {
	m.salt = nil
}

// SetIsSuper sets the "is_super" field.
func (m *XadminUserMutation) SetIsSuper(b bool) {
	m.is_super = &b
}

// IsSuper returns the value of the "is_super" field in the mutation.
func (m *XadminUserMutation) IsSuper() (r bool, exists bool) {
	v := m.is_super
	if v == nil {
		return
	}
	return *v, true
}

// OldIsSuper returns the old "is_super" field's value of the XadminUser entity.
// If the XadminUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *XadminUserMutation) OldIsSuper(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsSuper is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsSuper requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsSuper: %w", err)
	}
	return oldValue.IsSuper, nil
}

// ClearIsSuper clears the value of the "is_super" field.
func (m *XadminUserMutation) ClearIsSuper() {
	m.is_super = nil
	m.clearedFields[xadminuser.FieldIsSuper] = struct{}{}
}

// IsSuperCleared returns if the "is_super" field was cleared in this mutation.
func (m *XadminUserMutation) IsSuperCleared() bool {
	_, ok := m.clearedFields[xadminuser.FieldIsSuper]
	return ok
}

// ResetIsSuper resets all changes to the "is_super" field.
func (m *XadminUserMutation) ResetIsSuper() {
	m.is_super = nil
	delete(m.clearedFields, xadminuser.FieldIsSuper)
}

// SetLastLoginAt sets the "last_login_at" field.
func (m *XadminUserMutation) SetLastLoginAt(t time.Time) {
	m.last_login_at = &t
}

// LastLoginAt returns the value of the "last_login_at" field in the mutation.
func (m *XadminUserMutation) LastLoginAt() (r time.Time, exists bool) {
	v := m.last_login_at
	if v == nil {
		return
	}
	return *v, true
}

// OldLastLoginAt returns the old "last_login_at" field's value of the XadminUser entity.
// If the XadminUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *XadminUserMutation) OldLastLoginAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastLoginAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastLoginAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastLoginAt: %w", err)
	}
	return oldValue.LastLoginAt, nil
}

// ClearLastLoginAt clears the value of the "last_login_at" field.
func (m *XadminUserMutation) ClearLastLoginAt() {
	m.last_login_at = nil
	m.clearedFields[xadminuser.FieldLastLoginAt] = struct{}{}
}

// LastLoginAtCleared returns if the "last_login_at" field was cleared in this mutation.
func (m *XadminUserMutation) LastLoginAtCleared() bool {
	_, ok := m.clearedFields[xadminuser.FieldLastLoginAt]
	return ok
}

// ResetLastLoginAt resets all changes to the "last_login_at" field.
func (m *XadminUserMutation) ResetLastLoginAt() {
	m.last_login_at = nil
	delete(m.clearedFields, xadminuser.FieldLastLoginAt)
}

// AddRoleIDs adds the "roles" edge to the XadminRole entity by ids.
func (m *XadminUserMutation) AddRoleIDs(ids ...int) {
	if m.roles == nil {
		m.roles = make(map[int]struct{})
	}
	for i := range ids {
		m.roles[ids[i]] = struct{}{}
	}
}

// ClearRoles clears the "roles" edge to the XadminRole entity.
func (m *XadminUserMutation) ClearRoles() {
	m.clearedroles = true
}

// RolesCleared reports if the "roles" edge to the XadminRole entity was cleared.
func (m *XadminUserMutation) RolesCleared() bool {
	return m.clearedroles
}

// RemoveRoleIDs removes the "roles" edge to the XadminRole entity by IDs.
func (m *XadminUserMutation) RemoveRoleIDs(ids ...int) {
	if m.removedroles == nil {
		m.removedroles = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.roles, ids[i])
		m.removedroles[ids[i]] = struct{}{}
	}
}

// RemovedRoles returns the removed IDs of the "roles" edge to the XadminRole entity.
func (m *XadminUserMutation) RemovedRolesIDs() (ids []int) {
	for id := range m.removedroles {
		ids = append(ids, id)
	}
	return
}

// RolesIDs returns the "roles" edge IDs in the mutation.
func (m *XadminUserMutation) RolesIDs() (ids []int) {
	for id := range m.roles {
		ids = append(ids, id)
	}
	return
}

// ResetRoles resets all changes to the "roles" edge.
func (m *XadminUserMutation) ResetRoles() {
	m.roles = nil
	m.clearedroles = false
	m.removedroles = nil
}

// AddPermissionIDs adds the "permissions" edge to the XadminPermission entity by ids.
func (m *XadminUserMutation) AddPermissionIDs(ids ...int) {
	if m.permissions == nil {
		m.permissions = make(map[int]struct{})
	}
	for i := range ids {
		m.permissions[ids[i]] = struct{}{}
	}
}

// ClearPermissions clears the "permissions" edge to the XadminPermission entity.
func (m *XadminUserMutation) ClearPermissions() {
	m.clearedpermissions = true
}

// PermissionsCleared reports if the "permissions" edge to the XadminPermission entity was cleared.
func (m *XadminUserMutation) PermissionsCleared() bool {
	return m.clearedpermissions
}

// RemovePermissionIDs removes the "permissions" edge to the XadminPermission entity by IDs.
func (m *XadminUserMutation) RemovePermissionIDs(ids ...int) {
	if m.removedpermissions == nil {
		m.removedpermissions = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.permissions, ids[i])
		m.removedpermissions[ids[i]] = struct{}{}
	}
}

// RemovedPermissions returns the removed IDs of the "permissions" edge to the XadminPermission entity.
func (m *XadminUserMutation) RemovedPermissionsIDs() (ids []int) {
	for id := range m.removedpermissions {
		ids = append(ids, id)
	}
	return
}

// PermissionsIDs returns the "permissions" edge IDs in the mutation.
func (m *XadminUserMutation) PermissionsIDs() (ids []int) {
	for id := range m.permissions {
		ids = append(ids, id)
	}
	return
}

// ResetPermissions resets all changes to the "permissions" edge.
func (m *XadminUserMutation) ResetPermissions() {
	m.permissions = nil
	m.clearedpermissions = false
	m.removedpermissions = nil
}

// Where appends a list predicates to the XadminUserMutation builder.
func (m *XadminUserMutation) Where(ps ...predicate.XadminUser) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *XadminUserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (XadminUser).
func (m *XadminUserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *XadminUserMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.created_at != nil {
		fields = append(fields, xadminuser.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, xadminuser.FieldUpdatedAt)
	}
	if m.username != nil {
		fields = append(fields, xadminuser.FieldUsername)
	}
	if m.password != nil {
		fields = append(fields, xadminuser.FieldPassword)
	}
	if m.salt != nil {
		fields = append(fields, xadminuser.FieldSalt)
	}
	if m.is_super != nil {
		fields = append(fields, xadminuser.FieldIsSuper)
	}
	if m.last_login_at != nil {
		fields = append(fields, xadminuser.FieldLastLoginAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *XadminUserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case xadminuser.FieldCreatedAt:
		return m.CreatedAt()
	case xadminuser.FieldUpdatedAt:
		return m.UpdatedAt()
	case xadminuser.FieldUsername:
		return m.Username()
	case xadminuser.FieldPassword:
		return m.Password()
	case xadminuser.FieldSalt:
		return m.Salt()
	case xadminuser.FieldIsSuper:
		return m.IsSuper()
	case xadminuser.FieldLastLoginAt:
		return m.LastLoginAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *XadminUserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case xadminuser.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case xadminuser.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case xadminuser.FieldUsername:
		return m.OldUsername(ctx)
	case xadminuser.FieldPassword:
		return m.OldPassword(ctx)
	case xadminuser.FieldSalt:
		return m.OldSalt(ctx)
	case xadminuser.FieldIsSuper:
		return m.OldIsSuper(ctx)
	case xadminuser.FieldLastLoginAt:
		return m.OldLastLoginAt(ctx)
	}
	return nil, fmt.Errorf("unknown XadminUser field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *XadminUserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case xadminuser.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case xadminuser.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case xadminuser.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case xadminuser.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case xadminuser.FieldSalt:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSalt(v)
		return nil
	case xadminuser.FieldIsSuper:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsSuper(v)
		return nil
	case xadminuser.FieldLastLoginAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastLoginAt(v)
		return nil
	}
	return fmt.Errorf("unknown XadminUser field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *XadminUserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *XadminUserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *XadminUserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown XadminUser numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *XadminUserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(xadminuser.FieldIsSuper) {
		fields = append(fields, xadminuser.FieldIsSuper)
	}
	if m.FieldCleared(xadminuser.FieldLastLoginAt) {
		fields = append(fields, xadminuser.FieldLastLoginAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *XadminUserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *XadminUserMutation) ClearField(name string) error {
	switch name {
	case xadminuser.FieldIsSuper:
		m.ClearIsSuper()
		return nil
	case xadminuser.FieldLastLoginAt:
		m.ClearLastLoginAt()
		return nil
	}
	return fmt.Errorf("unknown XadminUser nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *XadminUserMutation) ResetField(name string) error {
	switch name {
	case xadminuser.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case xadminuser.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case xadminuser.FieldUsername:
		m.ResetUsername()
		return nil
	case xadminuser.FieldPassword:
		m.ResetPassword()
		return nil
	case xadminuser.FieldSalt:
		m.ResetSalt()
		return nil
	case xadminuser.FieldIsSuper:
		m.ResetIsSuper()
		return nil
	case xadminuser.FieldLastLoginAt:
		m.ResetLastLoginAt()
		return nil
	}
	return fmt.Errorf("unknown XadminUser field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *XadminUserMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.roles != nil {
		edges = append(edges, xadminuser.EdgeRoles)
	}
	if m.permissions != nil {
		edges = append(edges, xadminuser.EdgePermissions)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *XadminUserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case xadminuser.EdgeRoles:
		ids := make([]ent.Value, 0, len(m.roles))
		for id := range m.roles {
			ids = append(ids, id)
		}
		return ids
	case xadminuser.EdgePermissions:
		ids := make([]ent.Value, 0, len(m.permissions))
		for id := range m.permissions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *XadminUserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedroles != nil {
		edges = append(edges, xadminuser.EdgeRoles)
	}
	if m.removedpermissions != nil {
		edges = append(edges, xadminuser.EdgePermissions)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *XadminUserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case xadminuser.EdgeRoles:
		ids := make([]ent.Value, 0, len(m.removedroles))
		for id := range m.removedroles {
			ids = append(ids, id)
		}
		return ids
	case xadminuser.EdgePermissions:
		ids := make([]ent.Value, 0, len(m.removedpermissions))
		for id := range m.removedpermissions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *XadminUserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedroles {
		edges = append(edges, xadminuser.EdgeRoles)
	}
	if m.clearedpermissions {
		edges = append(edges, xadminuser.EdgePermissions)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *XadminUserMutation) EdgeCleared(name string) bool {
	switch name {
	case xadminuser.EdgeRoles:
		return m.clearedroles
	case xadminuser.EdgePermissions:
		return m.clearedpermissions
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *XadminUserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown XadminUser unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *XadminUserMutation) ResetEdge(name string) error {
	switch name {
	case xadminuser.EdgeRoles:
		m.ResetRoles()
		return nil
	case xadminuser.EdgePermissions:
		m.ResetPermissions()
		return nil
	}
	return fmt.Errorf("unknown XadminUser edge %s", name)
}
