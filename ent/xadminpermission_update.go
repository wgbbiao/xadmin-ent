// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wgbbiao/xadminent/ent/predicate"
	"github.com/wgbbiao/xadminent/ent/xadmincontenttype"
	"github.com/wgbbiao/xadminent/ent/xadminpermission"
	"github.com/wgbbiao/xadminent/ent/xadminrole"
	"github.com/wgbbiao/xadminent/ent/xadminuser"
)

// XadminPermissionUpdate is the builder for updating XadminPermission entities.
type XadminPermissionUpdate struct {
	config
	hooks    []Hook
	mutation *XadminPermissionMutation
}

// Where appends a list predicates to the XadminPermissionUpdate builder.
func (xpu *XadminPermissionUpdate) Where(ps ...predicate.XadminPermission) *XadminPermissionUpdate {
	xpu.mutation.Where(ps...)
	return xpu
}

// SetName sets the "name" field.
func (xpu *XadminPermissionUpdate) SetName(s string) *XadminPermissionUpdate {
	xpu.mutation.SetName(s)
	return xpu
}

// SetCode sets the "code" field.
func (xpu *XadminPermissionUpdate) SetCode(s string) *XadminPermissionUpdate {
	xpu.mutation.SetCode(s)
	return xpu
}

// SetCreatedAt sets the "created_at" field.
func (xpu *XadminPermissionUpdate) SetCreatedAt(t time.Time) *XadminPermissionUpdate {
	xpu.mutation.SetCreatedAt(t)
	return xpu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (xpu *XadminPermissionUpdate) SetNillableCreatedAt(t *time.Time) *XadminPermissionUpdate {
	if t != nil {
		xpu.SetCreatedAt(*t)
	}
	return xpu
}

// SetUpdatedAt sets the "updated_at" field.
func (xpu *XadminPermissionUpdate) SetUpdatedAt(t time.Time) *XadminPermissionUpdate {
	xpu.mutation.SetUpdatedAt(t)
	return xpu
}

// SetXadminPermissionContentType sets the "xadmin_permission_content_type" field.
func (xpu *XadminPermissionUpdate) SetXadminPermissionContentType(i int) *XadminPermissionUpdate {
	xpu.mutation.SetXadminPermissionContentType(i)
	return xpu
}

// SetNillableXadminPermissionContentType sets the "xadmin_permission_content_type" field if the given value is not nil.
func (xpu *XadminPermissionUpdate) SetNillableXadminPermissionContentType(i *int) *XadminPermissionUpdate {
	if i != nil {
		xpu.SetXadminPermissionContentType(*i)
	}
	return xpu
}

// ClearXadminPermissionContentType clears the value of the "xadmin_permission_content_type" field.
func (xpu *XadminPermissionUpdate) ClearXadminPermissionContentType() *XadminPermissionUpdate {
	xpu.mutation.ClearXadminPermissionContentType()
	return xpu
}

// SetContentTypeID sets the "ContentType" edge to the XadminContenttype entity by ID.
func (xpu *XadminPermissionUpdate) SetContentTypeID(id int) *XadminPermissionUpdate {
	xpu.mutation.SetContentTypeID(id)
	return xpu
}

// SetNillableContentTypeID sets the "ContentType" edge to the XadminContenttype entity by ID if the given value is not nil.
func (xpu *XadminPermissionUpdate) SetNillableContentTypeID(id *int) *XadminPermissionUpdate {
	if id != nil {
		xpu = xpu.SetContentTypeID(*id)
	}
	return xpu
}

// SetContentType sets the "ContentType" edge to the XadminContenttype entity.
func (xpu *XadminPermissionUpdate) SetContentType(x *XadminContenttype) *XadminPermissionUpdate {
	return xpu.SetContentTypeID(x.ID)
}

// AddUserIDs adds the "users" edge to the XadminUser entity by IDs.
func (xpu *XadminPermissionUpdate) AddUserIDs(ids ...int) *XadminPermissionUpdate {
	xpu.mutation.AddUserIDs(ids...)
	return xpu
}

// AddUsers adds the "users" edges to the XadminUser entity.
func (xpu *XadminPermissionUpdate) AddUsers(x ...*XadminUser) *XadminPermissionUpdate {
	ids := make([]int, len(x))
	for i := range x {
		ids[i] = x[i].ID
	}
	return xpu.AddUserIDs(ids...)
}

// AddRoleIDs adds the "roles" edge to the XadminRole entity by IDs.
func (xpu *XadminPermissionUpdate) AddRoleIDs(ids ...int) *XadminPermissionUpdate {
	xpu.mutation.AddRoleIDs(ids...)
	return xpu
}

// AddRoles adds the "roles" edges to the XadminRole entity.
func (xpu *XadminPermissionUpdate) AddRoles(x ...*XadminRole) *XadminPermissionUpdate {
	ids := make([]int, len(x))
	for i := range x {
		ids[i] = x[i].ID
	}
	return xpu.AddRoleIDs(ids...)
}

// Mutation returns the XadminPermissionMutation object of the builder.
func (xpu *XadminPermissionUpdate) Mutation() *XadminPermissionMutation {
	return xpu.mutation
}

// ClearContentType clears the "ContentType" edge to the XadminContenttype entity.
func (xpu *XadminPermissionUpdate) ClearContentType() *XadminPermissionUpdate {
	xpu.mutation.ClearContentType()
	return xpu
}

// ClearUsers clears all "users" edges to the XadminUser entity.
func (xpu *XadminPermissionUpdate) ClearUsers() *XadminPermissionUpdate {
	xpu.mutation.ClearUsers()
	return xpu
}

// RemoveUserIDs removes the "users" edge to XadminUser entities by IDs.
func (xpu *XadminPermissionUpdate) RemoveUserIDs(ids ...int) *XadminPermissionUpdate {
	xpu.mutation.RemoveUserIDs(ids...)
	return xpu
}

// RemoveUsers removes "users" edges to XadminUser entities.
func (xpu *XadminPermissionUpdate) RemoveUsers(x ...*XadminUser) *XadminPermissionUpdate {
	ids := make([]int, len(x))
	for i := range x {
		ids[i] = x[i].ID
	}
	return xpu.RemoveUserIDs(ids...)
}

// ClearRoles clears all "roles" edges to the XadminRole entity.
func (xpu *XadminPermissionUpdate) ClearRoles() *XadminPermissionUpdate {
	xpu.mutation.ClearRoles()
	return xpu
}

// RemoveRoleIDs removes the "roles" edge to XadminRole entities by IDs.
func (xpu *XadminPermissionUpdate) RemoveRoleIDs(ids ...int) *XadminPermissionUpdate {
	xpu.mutation.RemoveRoleIDs(ids...)
	return xpu
}

// RemoveRoles removes "roles" edges to XadminRole entities.
func (xpu *XadminPermissionUpdate) RemoveRoles(x ...*XadminRole) *XadminPermissionUpdate {
	ids := make([]int, len(x))
	for i := range x {
		ids[i] = x[i].ID
	}
	return xpu.RemoveRoleIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (xpu *XadminPermissionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	xpu.defaults()
	if len(xpu.hooks) == 0 {
		if err = xpu.check(); err != nil {
			return 0, err
		}
		affected, err = xpu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*XadminPermissionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = xpu.check(); err != nil {
				return 0, err
			}
			xpu.mutation = mutation
			affected, err = xpu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(xpu.hooks) - 1; i >= 0; i-- {
			if xpu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = xpu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, xpu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (xpu *XadminPermissionUpdate) SaveX(ctx context.Context) int {
	affected, err := xpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (xpu *XadminPermissionUpdate) Exec(ctx context.Context) error {
	_, err := xpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (xpu *XadminPermissionUpdate) ExecX(ctx context.Context) {
	if err := xpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (xpu *XadminPermissionUpdate) defaults() {
	if _, ok := xpu.mutation.UpdatedAt(); !ok {
		v := xadminpermission.UpdateDefaultUpdatedAt()
		xpu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (xpu *XadminPermissionUpdate) check() error {
	if v, ok := xpu.mutation.Name(); ok {
		if err := xadminpermission.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "XadminPermission.name": %w`, err)}
		}
	}
	if v, ok := xpu.mutation.Code(); ok {
		if err := xadminpermission.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "XadminPermission.code": %w`, err)}
		}
	}
	return nil
}

func (xpu *XadminPermissionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   xadminpermission.Table,
			Columns: xadminpermission.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: xadminpermission.FieldID,
			},
		},
	}
	if ps := xpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := xpu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: xadminpermission.FieldName,
		})
	}
	if value, ok := xpu.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: xadminpermission.FieldCode,
		})
	}
	if value, ok := xpu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: xadminpermission.FieldCreatedAt,
		})
	}
	if value, ok := xpu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: xadminpermission.FieldUpdatedAt,
		})
	}
	if xpu.mutation.ContentTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   xadminpermission.ContentTypeTable,
			Columns: []string{xadminpermission.ContentTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: xadmincontenttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := xpu.mutation.ContentTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   xadminpermission.ContentTypeTable,
			Columns: []string{xadminpermission.ContentTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: xadmincontenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if xpu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   xadminpermission.UsersTable,
			Columns: xadminpermission.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: xadminuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := xpu.mutation.RemovedUsersIDs(); len(nodes) > 0 && !xpu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   xadminpermission.UsersTable,
			Columns: xadminpermission.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: xadminuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := xpu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   xadminpermission.UsersTable,
			Columns: xadminpermission.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: xadminuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if xpu.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   xadminpermission.RolesTable,
			Columns: xadminpermission.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: xadminrole.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := xpu.mutation.RemovedRolesIDs(); len(nodes) > 0 && !xpu.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   xadminpermission.RolesTable,
			Columns: xadminpermission.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: xadminrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := xpu.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   xadminpermission.RolesTable,
			Columns: xadminpermission.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: xadminrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, xpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{xadminpermission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// XadminPermissionUpdateOne is the builder for updating a single XadminPermission entity.
type XadminPermissionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *XadminPermissionMutation
}

// SetName sets the "name" field.
func (xpuo *XadminPermissionUpdateOne) SetName(s string) *XadminPermissionUpdateOne {
	xpuo.mutation.SetName(s)
	return xpuo
}

// SetCode sets the "code" field.
func (xpuo *XadminPermissionUpdateOne) SetCode(s string) *XadminPermissionUpdateOne {
	xpuo.mutation.SetCode(s)
	return xpuo
}

// SetCreatedAt sets the "created_at" field.
func (xpuo *XadminPermissionUpdateOne) SetCreatedAt(t time.Time) *XadminPermissionUpdateOne {
	xpuo.mutation.SetCreatedAt(t)
	return xpuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (xpuo *XadminPermissionUpdateOne) SetNillableCreatedAt(t *time.Time) *XadminPermissionUpdateOne {
	if t != nil {
		xpuo.SetCreatedAt(*t)
	}
	return xpuo
}

// SetUpdatedAt sets the "updated_at" field.
func (xpuo *XadminPermissionUpdateOne) SetUpdatedAt(t time.Time) *XadminPermissionUpdateOne {
	xpuo.mutation.SetUpdatedAt(t)
	return xpuo
}

// SetXadminPermissionContentType sets the "xadmin_permission_content_type" field.
func (xpuo *XadminPermissionUpdateOne) SetXadminPermissionContentType(i int) *XadminPermissionUpdateOne {
	xpuo.mutation.SetXadminPermissionContentType(i)
	return xpuo
}

// SetNillableXadminPermissionContentType sets the "xadmin_permission_content_type" field if the given value is not nil.
func (xpuo *XadminPermissionUpdateOne) SetNillableXadminPermissionContentType(i *int) *XadminPermissionUpdateOne {
	if i != nil {
		xpuo.SetXadminPermissionContentType(*i)
	}
	return xpuo
}

// ClearXadminPermissionContentType clears the value of the "xadmin_permission_content_type" field.
func (xpuo *XadminPermissionUpdateOne) ClearXadminPermissionContentType() *XadminPermissionUpdateOne {
	xpuo.mutation.ClearXadminPermissionContentType()
	return xpuo
}

// SetContentTypeID sets the "ContentType" edge to the XadminContenttype entity by ID.
func (xpuo *XadminPermissionUpdateOne) SetContentTypeID(id int) *XadminPermissionUpdateOne {
	xpuo.mutation.SetContentTypeID(id)
	return xpuo
}

// SetNillableContentTypeID sets the "ContentType" edge to the XadminContenttype entity by ID if the given value is not nil.
func (xpuo *XadminPermissionUpdateOne) SetNillableContentTypeID(id *int) *XadminPermissionUpdateOne {
	if id != nil {
		xpuo = xpuo.SetContentTypeID(*id)
	}
	return xpuo
}

// SetContentType sets the "ContentType" edge to the XadminContenttype entity.
func (xpuo *XadminPermissionUpdateOne) SetContentType(x *XadminContenttype) *XadminPermissionUpdateOne {
	return xpuo.SetContentTypeID(x.ID)
}

// AddUserIDs adds the "users" edge to the XadminUser entity by IDs.
func (xpuo *XadminPermissionUpdateOne) AddUserIDs(ids ...int) *XadminPermissionUpdateOne {
	xpuo.mutation.AddUserIDs(ids...)
	return xpuo
}

// AddUsers adds the "users" edges to the XadminUser entity.
func (xpuo *XadminPermissionUpdateOne) AddUsers(x ...*XadminUser) *XadminPermissionUpdateOne {
	ids := make([]int, len(x))
	for i := range x {
		ids[i] = x[i].ID
	}
	return xpuo.AddUserIDs(ids...)
}

// AddRoleIDs adds the "roles" edge to the XadminRole entity by IDs.
func (xpuo *XadminPermissionUpdateOne) AddRoleIDs(ids ...int) *XadminPermissionUpdateOne {
	xpuo.mutation.AddRoleIDs(ids...)
	return xpuo
}

// AddRoles adds the "roles" edges to the XadminRole entity.
func (xpuo *XadminPermissionUpdateOne) AddRoles(x ...*XadminRole) *XadminPermissionUpdateOne {
	ids := make([]int, len(x))
	for i := range x {
		ids[i] = x[i].ID
	}
	return xpuo.AddRoleIDs(ids...)
}

// Mutation returns the XadminPermissionMutation object of the builder.
func (xpuo *XadminPermissionUpdateOne) Mutation() *XadminPermissionMutation {
	return xpuo.mutation
}

// ClearContentType clears the "ContentType" edge to the XadminContenttype entity.
func (xpuo *XadminPermissionUpdateOne) ClearContentType() *XadminPermissionUpdateOne {
	xpuo.mutation.ClearContentType()
	return xpuo
}

// ClearUsers clears all "users" edges to the XadminUser entity.
func (xpuo *XadminPermissionUpdateOne) ClearUsers() *XadminPermissionUpdateOne {
	xpuo.mutation.ClearUsers()
	return xpuo
}

// RemoveUserIDs removes the "users" edge to XadminUser entities by IDs.
func (xpuo *XadminPermissionUpdateOne) RemoveUserIDs(ids ...int) *XadminPermissionUpdateOne {
	xpuo.mutation.RemoveUserIDs(ids...)
	return xpuo
}

// RemoveUsers removes "users" edges to XadminUser entities.
func (xpuo *XadminPermissionUpdateOne) RemoveUsers(x ...*XadminUser) *XadminPermissionUpdateOne {
	ids := make([]int, len(x))
	for i := range x {
		ids[i] = x[i].ID
	}
	return xpuo.RemoveUserIDs(ids...)
}

// ClearRoles clears all "roles" edges to the XadminRole entity.
func (xpuo *XadminPermissionUpdateOne) ClearRoles() *XadminPermissionUpdateOne {
	xpuo.mutation.ClearRoles()
	return xpuo
}

// RemoveRoleIDs removes the "roles" edge to XadminRole entities by IDs.
func (xpuo *XadminPermissionUpdateOne) RemoveRoleIDs(ids ...int) *XadminPermissionUpdateOne {
	xpuo.mutation.RemoveRoleIDs(ids...)
	return xpuo
}

// RemoveRoles removes "roles" edges to XadminRole entities.
func (xpuo *XadminPermissionUpdateOne) RemoveRoles(x ...*XadminRole) *XadminPermissionUpdateOne {
	ids := make([]int, len(x))
	for i := range x {
		ids[i] = x[i].ID
	}
	return xpuo.RemoveRoleIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (xpuo *XadminPermissionUpdateOne) Select(field string, fields ...string) *XadminPermissionUpdateOne {
	xpuo.fields = append([]string{field}, fields...)
	return xpuo
}

// Save executes the query and returns the updated XadminPermission entity.
func (xpuo *XadminPermissionUpdateOne) Save(ctx context.Context) (*XadminPermission, error) {
	var (
		err  error
		node *XadminPermission
	)
	xpuo.defaults()
	if len(xpuo.hooks) == 0 {
		if err = xpuo.check(); err != nil {
			return nil, err
		}
		node, err = xpuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*XadminPermissionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = xpuo.check(); err != nil {
				return nil, err
			}
			xpuo.mutation = mutation
			node, err = xpuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(xpuo.hooks) - 1; i >= 0; i-- {
			if xpuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = xpuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, xpuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (xpuo *XadminPermissionUpdateOne) SaveX(ctx context.Context) *XadminPermission {
	node, err := xpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (xpuo *XadminPermissionUpdateOne) Exec(ctx context.Context) error {
	_, err := xpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (xpuo *XadminPermissionUpdateOne) ExecX(ctx context.Context) {
	if err := xpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (xpuo *XadminPermissionUpdateOne) defaults() {
	if _, ok := xpuo.mutation.UpdatedAt(); !ok {
		v := xadminpermission.UpdateDefaultUpdatedAt()
		xpuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (xpuo *XadminPermissionUpdateOne) check() error {
	if v, ok := xpuo.mutation.Name(); ok {
		if err := xadminpermission.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "XadminPermission.name": %w`, err)}
		}
	}
	if v, ok := xpuo.mutation.Code(); ok {
		if err := xadminpermission.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "XadminPermission.code": %w`, err)}
		}
	}
	return nil
}

func (xpuo *XadminPermissionUpdateOne) sqlSave(ctx context.Context) (_node *XadminPermission, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   xadminpermission.Table,
			Columns: xadminpermission.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: xadminpermission.FieldID,
			},
		},
	}
	id, ok := xpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "XadminPermission.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := xpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, xadminpermission.FieldID)
		for _, f := range fields {
			if !xadminpermission.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != xadminpermission.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := xpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := xpuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: xadminpermission.FieldName,
		})
	}
	if value, ok := xpuo.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: xadminpermission.FieldCode,
		})
	}
	if value, ok := xpuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: xadminpermission.FieldCreatedAt,
		})
	}
	if value, ok := xpuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: xadminpermission.FieldUpdatedAt,
		})
	}
	if xpuo.mutation.ContentTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   xadminpermission.ContentTypeTable,
			Columns: []string{xadminpermission.ContentTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: xadmincontenttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := xpuo.mutation.ContentTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   xadminpermission.ContentTypeTable,
			Columns: []string{xadminpermission.ContentTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: xadmincontenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if xpuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   xadminpermission.UsersTable,
			Columns: xadminpermission.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: xadminuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := xpuo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !xpuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   xadminpermission.UsersTable,
			Columns: xadminpermission.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: xadminuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := xpuo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   xadminpermission.UsersTable,
			Columns: xadminpermission.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: xadminuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if xpuo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   xadminpermission.RolesTable,
			Columns: xadminpermission.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: xadminrole.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := xpuo.mutation.RemovedRolesIDs(); len(nodes) > 0 && !xpuo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   xadminpermission.RolesTable,
			Columns: xadminpermission.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: xadminrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := xpuo.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   xadminpermission.RolesTable,
			Columns: xadminpermission.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: xadminrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &XadminPermission{config: xpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, xpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{xadminpermission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
