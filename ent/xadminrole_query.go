// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wgbbiao/xadminent/ent/predicate"
	"github.com/wgbbiao/xadminent/ent/xadminpermission"
	"github.com/wgbbiao/xadminent/ent/xadminrole"
	"github.com/wgbbiao/xadminent/ent/xadminuser"
)

// XadminRoleQuery is the builder for querying XadminRole entities.
type XadminRoleQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.XadminRole
	// eager-loading edges.
	withUsers       *XadminUserQuery
	withPermissions *XadminPermissionQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the XadminRoleQuery builder.
func (xrq *XadminRoleQuery) Where(ps ...predicate.XadminRole) *XadminRoleQuery {
	xrq.predicates = append(xrq.predicates, ps...)
	return xrq
}

// Limit adds a limit step to the query.
func (xrq *XadminRoleQuery) Limit(limit int) *XadminRoleQuery {
	xrq.limit = &limit
	return xrq
}

// Offset adds an offset step to the query.
func (xrq *XadminRoleQuery) Offset(offset int) *XadminRoleQuery {
	xrq.offset = &offset
	return xrq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (xrq *XadminRoleQuery) Unique(unique bool) *XadminRoleQuery {
	xrq.unique = &unique
	return xrq
}

// Order adds an order step to the query.
func (xrq *XadminRoleQuery) Order(o ...OrderFunc) *XadminRoleQuery {
	xrq.order = append(xrq.order, o...)
	return xrq
}

// QueryUsers chains the current query on the "users" edge.
func (xrq *XadminRoleQuery) QueryUsers() *XadminUserQuery {
	query := &XadminUserQuery{config: xrq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := xrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := xrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(xadminrole.Table, xadminrole.FieldID, selector),
			sqlgraph.To(xadminuser.Table, xadminuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, xadminrole.UsersTable, xadminrole.UsersPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(xrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPermissions chains the current query on the "permissions" edge.
func (xrq *XadminRoleQuery) QueryPermissions() *XadminPermissionQuery {
	query := &XadminPermissionQuery{config: xrq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := xrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := xrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(xadminrole.Table, xadminrole.FieldID, selector),
			sqlgraph.To(xadminpermission.Table, xadminpermission.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, xadminrole.PermissionsTable, xadminrole.PermissionsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(xrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first XadminRole entity from the query.
// Returns a *NotFoundError when no XadminRole was found.
func (xrq *XadminRoleQuery) First(ctx context.Context) (*XadminRole, error) {
	nodes, err := xrq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{xadminrole.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (xrq *XadminRoleQuery) FirstX(ctx context.Context) *XadminRole {
	node, err := xrq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first XadminRole ID from the query.
// Returns a *NotFoundError when no XadminRole ID was found.
func (xrq *XadminRoleQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = xrq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{xadminrole.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (xrq *XadminRoleQuery) FirstIDX(ctx context.Context) int {
	id, err := xrq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single XadminRole entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one XadminRole entity is found.
// Returns a *NotFoundError when no XadminRole entities are found.
func (xrq *XadminRoleQuery) Only(ctx context.Context) (*XadminRole, error) {
	nodes, err := xrq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{xadminrole.Label}
	default:
		return nil, &NotSingularError{xadminrole.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (xrq *XadminRoleQuery) OnlyX(ctx context.Context) *XadminRole {
	node, err := xrq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only XadminRole ID in the query.
// Returns a *NotSingularError when more than one XadminRole ID is found.
// Returns a *NotFoundError when no entities are found.
func (xrq *XadminRoleQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = xrq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{xadminrole.Label}
	default:
		err = &NotSingularError{xadminrole.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (xrq *XadminRoleQuery) OnlyIDX(ctx context.Context) int {
	id, err := xrq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of XadminRoles.
func (xrq *XadminRoleQuery) All(ctx context.Context) ([]*XadminRole, error) {
	if err := xrq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return xrq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (xrq *XadminRoleQuery) AllX(ctx context.Context) []*XadminRole {
	nodes, err := xrq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of XadminRole IDs.
func (xrq *XadminRoleQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := xrq.Select(xadminrole.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (xrq *XadminRoleQuery) IDsX(ctx context.Context) []int {
	ids, err := xrq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (xrq *XadminRoleQuery) Count(ctx context.Context) (int, error) {
	if err := xrq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return xrq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (xrq *XadminRoleQuery) CountX(ctx context.Context) int {
	count, err := xrq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (xrq *XadminRoleQuery) Exist(ctx context.Context) (bool, error) {
	if err := xrq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return xrq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (xrq *XadminRoleQuery) ExistX(ctx context.Context) bool {
	exist, err := xrq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the XadminRoleQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (xrq *XadminRoleQuery) Clone() *XadminRoleQuery {
	if xrq == nil {
		return nil
	}
	return &XadminRoleQuery{
		config:          xrq.config,
		limit:           xrq.limit,
		offset:          xrq.offset,
		order:           append([]OrderFunc{}, xrq.order...),
		predicates:      append([]predicate.XadminRole{}, xrq.predicates...),
		withUsers:       xrq.withUsers.Clone(),
		withPermissions: xrq.withPermissions.Clone(),
		// clone intermediate query.
		sql:    xrq.sql.Clone(),
		path:   xrq.path,
		unique: xrq.unique,
	}
}

// WithUsers tells the query-builder to eager-load the nodes that are connected to
// the "users" edge. The optional arguments are used to configure the query builder of the edge.
func (xrq *XadminRoleQuery) WithUsers(opts ...func(*XadminUserQuery)) *XadminRoleQuery {
	query := &XadminUserQuery{config: xrq.config}
	for _, opt := range opts {
		opt(query)
	}
	xrq.withUsers = query
	return xrq
}

// WithPermissions tells the query-builder to eager-load the nodes that are connected to
// the "permissions" edge. The optional arguments are used to configure the query builder of the edge.
func (xrq *XadminRoleQuery) WithPermissions(opts ...func(*XadminPermissionQuery)) *XadminRoleQuery {
	query := &XadminPermissionQuery{config: xrq.config}
	for _, opt := range opts {
		opt(query)
	}
	xrq.withPermissions = query
	return xrq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.XadminRole.Query().
//		GroupBy(xadminrole.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (xrq *XadminRoleQuery) GroupBy(field string, fields ...string) *XadminRoleGroupBy {
	group := &XadminRoleGroupBy{config: xrq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := xrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return xrq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.XadminRole.Query().
//		Select(xadminrole.FieldCreatedAt).
//		Scan(ctx, &v)
//
func (xrq *XadminRoleQuery) Select(fields ...string) *XadminRoleSelect {
	xrq.fields = append(xrq.fields, fields...)
	return &XadminRoleSelect{XadminRoleQuery: xrq}
}

func (xrq *XadminRoleQuery) prepareQuery(ctx context.Context) error {
	for _, f := range xrq.fields {
		if !xadminrole.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if xrq.path != nil {
		prev, err := xrq.path(ctx)
		if err != nil {
			return err
		}
		xrq.sql = prev
	}
	return nil
}

func (xrq *XadminRoleQuery) sqlAll(ctx context.Context) ([]*XadminRole, error) {
	var (
		nodes       = []*XadminRole{}
		_spec       = xrq.querySpec()
		loadedTypes = [2]bool{
			xrq.withUsers != nil,
			xrq.withPermissions != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &XadminRole{config: xrq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, xrq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := xrq.withUsers; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[int]*XadminRole, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
			node.Edges.Users = []*XadminUser{}
		}
		var (
			edgeids []int
			edges   = make(map[int][]*XadminRole)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: false,
				Table:   xadminrole.UsersTable,
				Columns: xadminrole.UsersPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(xadminrole.UsersPrimaryKey[0], fks...))
			},
			ScanValues: func() [2]interface{} {
				return [2]interface{}{new(sql.NullInt64), new(sql.NullInt64)}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullInt64)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullInt64)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := int(eout.Int64)
				inValue := int(ein.Int64)
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				if _, ok := edges[inValue]; !ok {
					edgeids = append(edgeids, inValue)
				}
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, xrq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "users": %w`, err)
		}
		query.Where(xadminuser.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "users" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Users = append(nodes[i].Edges.Users, n)
			}
		}
	}

	if query := xrq.withPermissions; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[int]*XadminRole, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
			node.Edges.Permissions = []*XadminPermission{}
		}
		var (
			edgeids []int
			edges   = make(map[int][]*XadminRole)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: true,
				Table:   xadminrole.PermissionsTable,
				Columns: xadminrole.PermissionsPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(xadminrole.PermissionsPrimaryKey[1], fks...))
			},
			ScanValues: func() [2]interface{} {
				return [2]interface{}{new(sql.NullInt64), new(sql.NullInt64)}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullInt64)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullInt64)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := int(eout.Int64)
				inValue := int(ein.Int64)
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				if _, ok := edges[inValue]; !ok {
					edgeids = append(edgeids, inValue)
				}
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, xrq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "permissions": %w`, err)
		}
		query.Where(xadminpermission.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "permissions" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Permissions = append(nodes[i].Edges.Permissions, n)
			}
		}
	}

	return nodes, nil
}

func (xrq *XadminRoleQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := xrq.querySpec()
	_spec.Node.Columns = xrq.fields
	if len(xrq.fields) > 0 {
		_spec.Unique = xrq.unique != nil && *xrq.unique
	}
	return sqlgraph.CountNodes(ctx, xrq.driver, _spec)
}

func (xrq *XadminRoleQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := xrq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (xrq *XadminRoleQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   xadminrole.Table,
			Columns: xadminrole.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: xadminrole.FieldID,
			},
		},
		From:   xrq.sql,
		Unique: true,
	}
	if unique := xrq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := xrq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, xadminrole.FieldID)
		for i := range fields {
			if fields[i] != xadminrole.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := xrq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := xrq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := xrq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := xrq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (xrq *XadminRoleQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(xrq.driver.Dialect())
	t1 := builder.Table(xadminrole.Table)
	columns := xrq.fields
	if len(columns) == 0 {
		columns = xadminrole.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if xrq.sql != nil {
		selector = xrq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if xrq.unique != nil && *xrq.unique {
		selector.Distinct()
	}
	for _, p := range xrq.predicates {
		p(selector)
	}
	for _, p := range xrq.order {
		p(selector)
	}
	if offset := xrq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := xrq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// XadminRoleGroupBy is the group-by builder for XadminRole entities.
type XadminRoleGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (xrgb *XadminRoleGroupBy) Aggregate(fns ...AggregateFunc) *XadminRoleGroupBy {
	xrgb.fns = append(xrgb.fns, fns...)
	return xrgb
}

// Scan applies the group-by query and scans the result into the given value.
func (xrgb *XadminRoleGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := xrgb.path(ctx)
	if err != nil {
		return err
	}
	xrgb.sql = query
	return xrgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (xrgb *XadminRoleGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := xrgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (xrgb *XadminRoleGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(xrgb.fields) > 1 {
		return nil, errors.New("ent: XadminRoleGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := xrgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (xrgb *XadminRoleGroupBy) StringsX(ctx context.Context) []string {
	v, err := xrgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (xrgb *XadminRoleGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = xrgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{xadminrole.Label}
	default:
		err = fmt.Errorf("ent: XadminRoleGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (xrgb *XadminRoleGroupBy) StringX(ctx context.Context) string {
	v, err := xrgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (xrgb *XadminRoleGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(xrgb.fields) > 1 {
		return nil, errors.New("ent: XadminRoleGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := xrgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (xrgb *XadminRoleGroupBy) IntsX(ctx context.Context) []int {
	v, err := xrgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (xrgb *XadminRoleGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = xrgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{xadminrole.Label}
	default:
		err = fmt.Errorf("ent: XadminRoleGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (xrgb *XadminRoleGroupBy) IntX(ctx context.Context) int {
	v, err := xrgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (xrgb *XadminRoleGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(xrgb.fields) > 1 {
		return nil, errors.New("ent: XadminRoleGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := xrgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (xrgb *XadminRoleGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := xrgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (xrgb *XadminRoleGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = xrgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{xadminrole.Label}
	default:
		err = fmt.Errorf("ent: XadminRoleGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (xrgb *XadminRoleGroupBy) Float64X(ctx context.Context) float64 {
	v, err := xrgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (xrgb *XadminRoleGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(xrgb.fields) > 1 {
		return nil, errors.New("ent: XadminRoleGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := xrgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (xrgb *XadminRoleGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := xrgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (xrgb *XadminRoleGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = xrgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{xadminrole.Label}
	default:
		err = fmt.Errorf("ent: XadminRoleGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (xrgb *XadminRoleGroupBy) BoolX(ctx context.Context) bool {
	v, err := xrgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (xrgb *XadminRoleGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range xrgb.fields {
		if !xadminrole.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := xrgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := xrgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (xrgb *XadminRoleGroupBy) sqlQuery() *sql.Selector {
	selector := xrgb.sql.Select()
	aggregation := make([]string, 0, len(xrgb.fns))
	for _, fn := range xrgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(xrgb.fields)+len(xrgb.fns))
		for _, f := range xrgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(xrgb.fields...)...)
}

// XadminRoleSelect is the builder for selecting fields of XadminRole entities.
type XadminRoleSelect struct {
	*XadminRoleQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (xrs *XadminRoleSelect) Scan(ctx context.Context, v interface{}) error {
	if err := xrs.prepareQuery(ctx); err != nil {
		return err
	}
	xrs.sql = xrs.XadminRoleQuery.sqlQuery(ctx)
	return xrs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (xrs *XadminRoleSelect) ScanX(ctx context.Context, v interface{}) {
	if err := xrs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (xrs *XadminRoleSelect) Strings(ctx context.Context) ([]string, error) {
	if len(xrs.fields) > 1 {
		return nil, errors.New("ent: XadminRoleSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := xrs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (xrs *XadminRoleSelect) StringsX(ctx context.Context) []string {
	v, err := xrs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (xrs *XadminRoleSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = xrs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{xadminrole.Label}
	default:
		err = fmt.Errorf("ent: XadminRoleSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (xrs *XadminRoleSelect) StringX(ctx context.Context) string {
	v, err := xrs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (xrs *XadminRoleSelect) Ints(ctx context.Context) ([]int, error) {
	if len(xrs.fields) > 1 {
		return nil, errors.New("ent: XadminRoleSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := xrs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (xrs *XadminRoleSelect) IntsX(ctx context.Context) []int {
	v, err := xrs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (xrs *XadminRoleSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = xrs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{xadminrole.Label}
	default:
		err = fmt.Errorf("ent: XadminRoleSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (xrs *XadminRoleSelect) IntX(ctx context.Context) int {
	v, err := xrs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (xrs *XadminRoleSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(xrs.fields) > 1 {
		return nil, errors.New("ent: XadminRoleSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := xrs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (xrs *XadminRoleSelect) Float64sX(ctx context.Context) []float64 {
	v, err := xrs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (xrs *XadminRoleSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = xrs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{xadminrole.Label}
	default:
		err = fmt.Errorf("ent: XadminRoleSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (xrs *XadminRoleSelect) Float64X(ctx context.Context) float64 {
	v, err := xrs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (xrs *XadminRoleSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(xrs.fields) > 1 {
		return nil, errors.New("ent: XadminRoleSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := xrs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (xrs *XadminRoleSelect) BoolsX(ctx context.Context) []bool {
	v, err := xrs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (xrs *XadminRoleSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = xrs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{xadminrole.Label}
	default:
		err = fmt.Errorf("ent: XadminRoleSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (xrs *XadminRoleSelect) BoolX(ctx context.Context) bool {
	v, err := xrs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (xrs *XadminRoleSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := xrs.sql.Query()
	if err := xrs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
