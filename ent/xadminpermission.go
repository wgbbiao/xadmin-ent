// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/wgbbiao/xadminent/ent/xadmincontenttype"
	"github.com/wgbbiao/xadminent/ent/xadminpermission"
)

// XadminPermission is the model entity for the XadminPermission schema.
type XadminPermission struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// XadminPermissionContentType holds the value of the "xadmin_permission_content_type" field.
	XadminPermissionContentType int `json:"xadmin_permission_content_type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the XadminPermissionQuery when eager-loading is set.
	Edges XadminPermissionEdges `json:"edges"`
}

// XadminPermissionEdges holds the relations/edges for other nodes in the graph.
type XadminPermissionEdges struct {
	// ContentType holds the value of the ContentType edge.
	ContentType *XadminContenttype `json:"ContentType,omitempty"`
	// Users holds the value of the users edge.
	Users []*XadminUser `json:"users,omitempty"`
	// Roles holds the value of the roles edge.
	Roles []*XadminRole `json:"roles,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ContentTypeOrErr returns the ContentType value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e XadminPermissionEdges) ContentTypeOrErr() (*XadminContenttype, error) {
	if e.loadedTypes[0] {
		if e.ContentType == nil {
			// The edge ContentType was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: xadmincontenttype.Label}
		}
		return e.ContentType, nil
	}
	return nil, &NotLoadedError{edge: "ContentType"}
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e XadminPermissionEdges) UsersOrErr() ([]*XadminUser, error) {
	if e.loadedTypes[1] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// RolesOrErr returns the Roles value or an error if the edge
// was not loaded in eager-loading.
func (e XadminPermissionEdges) RolesOrErr() ([]*XadminRole, error) {
	if e.loadedTypes[2] {
		return e.Roles, nil
	}
	return nil, &NotLoadedError{edge: "roles"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*XadminPermission) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case xadminpermission.FieldID, xadminpermission.FieldXadminPermissionContentType:
			values[i] = new(sql.NullInt64)
		case xadminpermission.FieldName, xadminpermission.FieldCode:
			values[i] = new(sql.NullString)
		case xadminpermission.FieldCreatedAt, xadminpermission.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type XadminPermission", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the XadminPermission fields.
func (xp *XadminPermission) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case xadminpermission.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			xp.ID = int(value.Int64)
		case xadminpermission.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				xp.CreatedAt = value.Time
			}
		case xadminpermission.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				xp.UpdatedAt = value.Time
			}
		case xadminpermission.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				xp.Name = value.String
			}
		case xadminpermission.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				xp.Code = value.String
			}
		case xadminpermission.FieldXadminPermissionContentType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field xadmin_permission_content_type", values[i])
			} else if value.Valid {
				xp.XadminPermissionContentType = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryContentType queries the "ContentType" edge of the XadminPermission entity.
func (xp *XadminPermission) QueryContentType() *XadminContenttypeQuery {
	return (&XadminPermissionClient{config: xp.config}).QueryContentType(xp)
}

// QueryUsers queries the "users" edge of the XadminPermission entity.
func (xp *XadminPermission) QueryUsers() *XadminUserQuery {
	return (&XadminPermissionClient{config: xp.config}).QueryUsers(xp)
}

// QueryRoles queries the "roles" edge of the XadminPermission entity.
func (xp *XadminPermission) QueryRoles() *XadminRoleQuery {
	return (&XadminPermissionClient{config: xp.config}).QueryRoles(xp)
}

// Update returns a builder for updating this XadminPermission.
// Note that you need to call XadminPermission.Unwrap() before calling this method if this XadminPermission
// was returned from a transaction, and the transaction was committed or rolled back.
func (xp *XadminPermission) Update() *XadminPermissionUpdateOne {
	return (&XadminPermissionClient{config: xp.config}).UpdateOne(xp)
}

// Unwrap unwraps the XadminPermission entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (xp *XadminPermission) Unwrap() *XadminPermission {
	tx, ok := xp.config.driver.(*txDriver)
	if !ok {
		panic("ent: XadminPermission is not a transactional entity")
	}
	xp.config.driver = tx.drv
	return xp
}

// String implements the fmt.Stringer.
func (xp *XadminPermission) String() string {
	var builder strings.Builder
	builder.WriteString("XadminPermission(")
	builder.WriteString(fmt.Sprintf("id=%v", xp.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(xp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(xp.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", name=")
	builder.WriteString(xp.Name)
	builder.WriteString(", code=")
	builder.WriteString(xp.Code)
	builder.WriteString(", xadmin_permission_content_type=")
	builder.WriteString(fmt.Sprintf("%v", xp.XadminPermissionContentType))
	builder.WriteByte(')')
	return builder.String()
}

// XadminPermissions is a parsable slice of XadminPermission.
type XadminPermissions []*XadminPermission

func (xp XadminPermissions) config(cfg config) {
	for _i := range xp {
		xp[_i].config = cfg
	}
}
