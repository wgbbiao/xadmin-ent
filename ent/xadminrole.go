// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/wgbbiao/xadminent/ent/xadminrole"
)

// XadminRole is the model entity for the XadminRole schema.
type XadminRole struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the XadminRoleQuery when eager-loading is set.
	Edges XadminRoleEdges `json:"edges"`
}

// XadminRoleEdges holds the relations/edges for other nodes in the graph.
type XadminRoleEdges struct {
	// Users holds the value of the users edge.
	Users []*XadminUser `json:"users,omitempty"`
	// Permissions holds the value of the permissions edge.
	Permissions []*XadminPermission `json:"permissions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e XadminRoleEdges) UsersOrErr() ([]*XadminUser, error) {
	if e.loadedTypes[0] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// PermissionsOrErr returns the Permissions value or an error if the edge
// was not loaded in eager-loading.
func (e XadminRoleEdges) PermissionsOrErr() ([]*XadminPermission, error) {
	if e.loadedTypes[1] {
		return e.Permissions, nil
	}
	return nil, &NotLoadedError{edge: "permissions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*XadminRole) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case xadminrole.FieldID:
			values[i] = new(sql.NullInt64)
		case xadminrole.FieldName:
			values[i] = new(sql.NullString)
		case xadminrole.FieldCreatedAt, xadminrole.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type XadminRole", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the XadminRole fields.
func (xr *XadminRole) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case xadminrole.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			xr.ID = int(value.Int64)
		case xadminrole.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				xr.Name = value.String
			}
		case xadminrole.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				xr.CreatedAt = value.Time
			}
		case xadminrole.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				xr.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryUsers queries the "users" edge of the XadminRole entity.
func (xr *XadminRole) QueryUsers() *XadminUserQuery {
	return (&XadminRoleClient{config: xr.config}).QueryUsers(xr)
}

// QueryPermissions queries the "permissions" edge of the XadminRole entity.
func (xr *XadminRole) QueryPermissions() *XadminPermissionQuery {
	return (&XadminRoleClient{config: xr.config}).QueryPermissions(xr)
}

// Update returns a builder for updating this XadminRole.
// Note that you need to call XadminRole.Unwrap() before calling this method if this XadminRole
// was returned from a transaction, and the transaction was committed or rolled back.
func (xr *XadminRole) Update() *XadminRoleUpdateOne {
	return (&XadminRoleClient{config: xr.config}).UpdateOne(xr)
}

// Unwrap unwraps the XadminRole entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (xr *XadminRole) Unwrap() *XadminRole {
	tx, ok := xr.config.driver.(*txDriver)
	if !ok {
		panic("ent: XadminRole is not a transactional entity")
	}
	xr.config.driver = tx.drv
	return xr
}

// String implements the fmt.Stringer.
func (xr *XadminRole) String() string {
	var builder strings.Builder
	builder.WriteString("XadminRole(")
	builder.WriteString(fmt.Sprintf("id=%v", xr.ID))
	builder.WriteString(", name=")
	builder.WriteString(xr.Name)
	builder.WriteString(", created_at=")
	builder.WriteString(xr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(xr.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// XadminRoles is a parsable slice of XadminRole.
type XadminRoles []*XadminRole

func (xr XadminRoles) config(cfg config) {
	for _i := range xr {
		xr[_i].config = cfg
	}
}
