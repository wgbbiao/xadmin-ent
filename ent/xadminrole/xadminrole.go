// Code generated by entc, DO NOT EDIT.

package xadminrole

import (
	"time"
)

const (
	// Label holds the string label denoting the xadminrole type in the database.
	Label = "xadmin_role"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "users"
	// EdgePermissions holds the string denoting the permissions edge name in mutations.
	EdgePermissions = "permissions"
	// Table holds the table name of the xadminrole in the database.
	Table = "xadmin_roles"
	// UsersTable is the table that holds the users relation/edge. The primary key declared below.
	UsersTable = "xadmin_role_users"
	// UsersInverseTable is the table name for the XadminUser entity.
	// It exists in this package in order to avoid circular dependency with the "xadminuser" package.
	UsersInverseTable = "xadmin_users"
	// PermissionsTable is the table that holds the permissions relation/edge. The primary key declared below.
	PermissionsTable = "xadmin_permission_roles"
	// PermissionsInverseTable is the table name for the XadminPermission entity.
	// It exists in this package in order to avoid circular dependency with the "xadminpermission" package.
	PermissionsInverseTable = "xadmin_permissions"
)

// Columns holds all SQL columns for xadminrole fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldCreatedAt,
	FieldUpdatedAt,
}

var (
	// UsersPrimaryKey and UsersColumn2 are the table columns denoting the
	// primary key for the users relation (M2M).
	UsersPrimaryKey = []string{"xadmin_role_id", "xadmin_user_id"}
	// PermissionsPrimaryKey and PermissionsColumn2 are the table columns denoting the
	// primary key for the permissions relation (M2M).
	PermissionsPrimaryKey = []string{"xadmin_permission_id", "xadmin_role_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)
