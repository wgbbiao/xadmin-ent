// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wgbbiao/xadminent/ent/xadminpermission"
	"github.com/wgbbiao/xadminent/ent/xadminrole"
	"github.com/wgbbiao/xadminent/ent/xadminuser"
)

// XadminUserCreate is the builder for creating a XadminUser entity.
type XadminUserCreate struct {
	config
	mutation *XadminUserMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (xuc *XadminUserCreate) SetCreatedAt(t time.Time) *XadminUserCreate {
	xuc.mutation.SetCreatedAt(t)
	return xuc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (xuc *XadminUserCreate) SetNillableCreatedAt(t *time.Time) *XadminUserCreate {
	if t != nil {
		xuc.SetCreatedAt(*t)
	}
	return xuc
}

// SetUpdatedAt sets the "updated_at" field.
func (xuc *XadminUserCreate) SetUpdatedAt(t time.Time) *XadminUserCreate {
	xuc.mutation.SetUpdatedAt(t)
	return xuc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (xuc *XadminUserCreate) SetNillableUpdatedAt(t *time.Time) *XadminUserCreate {
	if t != nil {
		xuc.SetUpdatedAt(*t)
	}
	return xuc
}

// SetUsername sets the "username" field.
func (xuc *XadminUserCreate) SetUsername(s string) *XadminUserCreate {
	xuc.mutation.SetUsername(s)
	return xuc
}

// SetPassword sets the "password" field.
func (xuc *XadminUserCreate) SetPassword(s string) *XadminUserCreate {
	xuc.mutation.SetPassword(s)
	return xuc
}

// SetSalt sets the "salt" field.
func (xuc *XadminUserCreate) SetSalt(s string) *XadminUserCreate {
	xuc.mutation.SetSalt(s)
	return xuc
}

// SetIsSuper sets the "is_super" field.
func (xuc *XadminUserCreate) SetIsSuper(b bool) *XadminUserCreate {
	xuc.mutation.SetIsSuper(b)
	return xuc
}

// SetNillableIsSuper sets the "is_super" field if the given value is not nil.
func (xuc *XadminUserCreate) SetNillableIsSuper(b *bool) *XadminUserCreate {
	if b != nil {
		xuc.SetIsSuper(*b)
	}
	return xuc
}

// SetLastLoginAt sets the "last_login_at" field.
func (xuc *XadminUserCreate) SetLastLoginAt(t time.Time) *XadminUserCreate {
	xuc.mutation.SetLastLoginAt(t)
	return xuc
}

// SetNillableLastLoginAt sets the "last_login_at" field if the given value is not nil.
func (xuc *XadminUserCreate) SetNillableLastLoginAt(t *time.Time) *XadminUserCreate {
	if t != nil {
		xuc.SetLastLoginAt(*t)
	}
	return xuc
}

// AddRoleIDs adds the "roles" edge to the XadminRole entity by IDs.
func (xuc *XadminUserCreate) AddRoleIDs(ids ...int) *XadminUserCreate {
	xuc.mutation.AddRoleIDs(ids...)
	return xuc
}

// AddRoles adds the "roles" edges to the XadminRole entity.
func (xuc *XadminUserCreate) AddRoles(x ...*XadminRole) *XadminUserCreate {
	ids := make([]int, len(x))
	for i := range x {
		ids[i] = x[i].ID
	}
	return xuc.AddRoleIDs(ids...)
}

// AddPermissionIDs adds the "permissions" edge to the XadminPermission entity by IDs.
func (xuc *XadminUserCreate) AddPermissionIDs(ids ...int) *XadminUserCreate {
	xuc.mutation.AddPermissionIDs(ids...)
	return xuc
}

// AddPermissions adds the "permissions" edges to the XadminPermission entity.
func (xuc *XadminUserCreate) AddPermissions(x ...*XadminPermission) *XadminUserCreate {
	ids := make([]int, len(x))
	for i := range x {
		ids[i] = x[i].ID
	}
	return xuc.AddPermissionIDs(ids...)
}

// Mutation returns the XadminUserMutation object of the builder.
func (xuc *XadminUserCreate) Mutation() *XadminUserMutation {
	return xuc.mutation
}

// Save creates the XadminUser in the database.
func (xuc *XadminUserCreate) Save(ctx context.Context) (*XadminUser, error) {
	var (
		err  error
		node *XadminUser
	)
	xuc.defaults()
	if len(xuc.hooks) == 0 {
		if err = xuc.check(); err != nil {
			return nil, err
		}
		node, err = xuc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*XadminUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = xuc.check(); err != nil {
				return nil, err
			}
			xuc.mutation = mutation
			if node, err = xuc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(xuc.hooks) - 1; i >= 0; i-- {
			if xuc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = xuc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, xuc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (xuc *XadminUserCreate) SaveX(ctx context.Context) *XadminUser {
	v, err := xuc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (xuc *XadminUserCreate) Exec(ctx context.Context) error {
	_, err := xuc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (xuc *XadminUserCreate) ExecX(ctx context.Context) {
	if err := xuc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (xuc *XadminUserCreate) defaults() {
	if _, ok := xuc.mutation.CreatedAt(); !ok {
		v := xadminuser.DefaultCreatedAt()
		xuc.mutation.SetCreatedAt(v)
	}
	if _, ok := xuc.mutation.UpdatedAt(); !ok {
		v := xadminuser.DefaultUpdatedAt()
		xuc.mutation.SetUpdatedAt(v)
	}
	if _, ok := xuc.mutation.IsSuper(); !ok {
		v := xadminuser.DefaultIsSuper
		xuc.mutation.SetIsSuper(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (xuc *XadminUserCreate) check() error {
	if _, ok := xuc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "XadminUser.created_at"`)}
	}
	if _, ok := xuc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "XadminUser.updated_at"`)}
	}
	if _, ok := xuc.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "XadminUser.username"`)}
	}
	if _, ok := xuc.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`ent: missing required field "XadminUser.password"`)}
	}
	if _, ok := xuc.mutation.Salt(); !ok {
		return &ValidationError{Name: "salt", err: errors.New(`ent: missing required field "XadminUser.salt"`)}
	}
	return nil
}

func (xuc *XadminUserCreate) sqlSave(ctx context.Context) (*XadminUser, error) {
	_node, _spec := xuc.createSpec()
	if err := sqlgraph.CreateNode(ctx, xuc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (xuc *XadminUserCreate) createSpec() (*XadminUser, *sqlgraph.CreateSpec) {
	var (
		_node = &XadminUser{config: xuc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: xadminuser.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: xadminuser.FieldID,
			},
		}
	)
	if value, ok := xuc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: xadminuser.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := xuc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: xadminuser.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := xuc.mutation.Username(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: xadminuser.FieldUsername,
		})
		_node.Username = value
	}
	if value, ok := xuc.mutation.Password(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: xadminuser.FieldPassword,
		})
		_node.Password = value
	}
	if value, ok := xuc.mutation.Salt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: xadminuser.FieldSalt,
		})
		_node.Salt = value
	}
	if value, ok := xuc.mutation.IsSuper(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: xadminuser.FieldIsSuper,
		})
		_node.IsSuper = value
	}
	if value, ok := xuc.mutation.LastLoginAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: xadminuser.FieldLastLoginAt,
		})
		_node.LastLoginAt = &value
	}
	if nodes := xuc.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   xadminuser.RolesTable,
			Columns: xadminuser.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: xadminrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := xuc.mutation.PermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   xadminuser.PermissionsTable,
			Columns: xadminuser.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: xadminpermission.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// XadminUserCreateBulk is the builder for creating many XadminUser entities in bulk.
type XadminUserCreateBulk struct {
	config
	builders []*XadminUserCreate
}

// Save creates the XadminUser entities in the database.
func (xucb *XadminUserCreateBulk) Save(ctx context.Context) ([]*XadminUser, error) {
	specs := make([]*sqlgraph.CreateSpec, len(xucb.builders))
	nodes := make([]*XadminUser, len(xucb.builders))
	mutators := make([]Mutator, len(xucb.builders))
	for i := range xucb.builders {
		func(i int, root context.Context) {
			builder := xucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*XadminUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, xucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, xucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, xucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (xucb *XadminUserCreateBulk) SaveX(ctx context.Context) []*XadminUser {
	v, err := xucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (xucb *XadminUserCreateBulk) Exec(ctx context.Context) error {
	_, err := xucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (xucb *XadminUserCreateBulk) ExecX(ctx context.Context) {
	if err := xucb.Exec(ctx); err != nil {
		panic(err)
	}
}
