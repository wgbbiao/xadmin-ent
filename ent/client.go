// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/wgbbiao/xadminent/ent/migrate"

	"github.com/wgbbiao/xadminent/ent/xadmincontenttype"
	"github.com/wgbbiao/xadminent/ent/xadminpermission"
	"github.com/wgbbiao/xadminent/ent/xadminrole"
	"github.com/wgbbiao/xadminent/ent/xadminuser"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// XadminContenttype is the client for interacting with the XadminContenttype builders.
	XadminContenttype *XadminContenttypeClient
	// XadminPermission is the client for interacting with the XadminPermission builders.
	XadminPermission *XadminPermissionClient
	// XadminRole is the client for interacting with the XadminRole builders.
	XadminRole *XadminRoleClient
	// XadminUser is the client for interacting with the XadminUser builders.
	XadminUser *XadminUserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.XadminContenttype = NewXadminContenttypeClient(c.config)
	c.XadminPermission = NewXadminPermissionClient(c.config)
	c.XadminRole = NewXadminRoleClient(c.config)
	c.XadminUser = NewXadminUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:               ctx,
		config:            cfg,
		XadminContenttype: NewXadminContenttypeClient(cfg),
		XadminPermission:  NewXadminPermissionClient(cfg),
		XadminRole:        NewXadminRoleClient(cfg),
		XadminUser:        NewXadminUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:               ctx,
		config:            cfg,
		XadminContenttype: NewXadminContenttypeClient(cfg),
		XadminPermission:  NewXadminPermissionClient(cfg),
		XadminRole:        NewXadminRoleClient(cfg),
		XadminUser:        NewXadminUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		XadminContenttype.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.XadminContenttype.Use(hooks...)
	c.XadminPermission.Use(hooks...)
	c.XadminRole.Use(hooks...)
	c.XadminUser.Use(hooks...)
}

// XadminContenttypeClient is a client for the XadminContenttype schema.
type XadminContenttypeClient struct {
	config
}

// NewXadminContenttypeClient returns a client for the XadminContenttype from the given config.
func NewXadminContenttypeClient(c config) *XadminContenttypeClient {
	return &XadminContenttypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `xadmincontenttype.Hooks(f(g(h())))`.
func (c *XadminContenttypeClient) Use(hooks ...Hook) {
	c.hooks.XadminContenttype = append(c.hooks.XadminContenttype, hooks...)
}

// Create returns a create builder for XadminContenttype.
func (c *XadminContenttypeClient) Create() *XadminContenttypeCreate {
	mutation := newXadminContenttypeMutation(c.config, OpCreate)
	return &XadminContenttypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of XadminContenttype entities.
func (c *XadminContenttypeClient) CreateBulk(builders ...*XadminContenttypeCreate) *XadminContenttypeCreateBulk {
	return &XadminContenttypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for XadminContenttype.
func (c *XadminContenttypeClient) Update() *XadminContenttypeUpdate {
	mutation := newXadminContenttypeMutation(c.config, OpUpdate)
	return &XadminContenttypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *XadminContenttypeClient) UpdateOne(xc *XadminContenttype) *XadminContenttypeUpdateOne {
	mutation := newXadminContenttypeMutation(c.config, OpUpdateOne, withXadminContenttype(xc))
	return &XadminContenttypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *XadminContenttypeClient) UpdateOneID(id int) *XadminContenttypeUpdateOne {
	mutation := newXadminContenttypeMutation(c.config, OpUpdateOne, withXadminContenttypeID(id))
	return &XadminContenttypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for XadminContenttype.
func (c *XadminContenttypeClient) Delete() *XadminContenttypeDelete {
	mutation := newXadminContenttypeMutation(c.config, OpDelete)
	return &XadminContenttypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *XadminContenttypeClient) DeleteOne(xc *XadminContenttype) *XadminContenttypeDeleteOne {
	return c.DeleteOneID(xc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *XadminContenttypeClient) DeleteOneID(id int) *XadminContenttypeDeleteOne {
	builder := c.Delete().Where(xadmincontenttype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &XadminContenttypeDeleteOne{builder}
}

// Query returns a query builder for XadminContenttype.
func (c *XadminContenttypeClient) Query() *XadminContenttypeQuery {
	return &XadminContenttypeQuery{
		config: c.config,
	}
}

// Get returns a XadminContenttype entity by its id.
func (c *XadminContenttypeClient) Get(ctx context.Context, id int) (*XadminContenttype, error) {
	return c.Query().Where(xadmincontenttype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *XadminContenttypeClient) GetX(ctx context.Context, id int) *XadminContenttype {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *XadminContenttypeClient) Hooks() []Hook {
	return c.hooks.XadminContenttype
}

// XadminPermissionClient is a client for the XadminPermission schema.
type XadminPermissionClient struct {
	config
}

// NewXadminPermissionClient returns a client for the XadminPermission from the given config.
func NewXadminPermissionClient(c config) *XadminPermissionClient {
	return &XadminPermissionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `xadminpermission.Hooks(f(g(h())))`.
func (c *XadminPermissionClient) Use(hooks ...Hook) {
	c.hooks.XadminPermission = append(c.hooks.XadminPermission, hooks...)
}

// Create returns a create builder for XadminPermission.
func (c *XadminPermissionClient) Create() *XadminPermissionCreate {
	mutation := newXadminPermissionMutation(c.config, OpCreate)
	return &XadminPermissionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of XadminPermission entities.
func (c *XadminPermissionClient) CreateBulk(builders ...*XadminPermissionCreate) *XadminPermissionCreateBulk {
	return &XadminPermissionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for XadminPermission.
func (c *XadminPermissionClient) Update() *XadminPermissionUpdate {
	mutation := newXadminPermissionMutation(c.config, OpUpdate)
	return &XadminPermissionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *XadminPermissionClient) UpdateOne(xp *XadminPermission) *XadminPermissionUpdateOne {
	mutation := newXadminPermissionMutation(c.config, OpUpdateOne, withXadminPermission(xp))
	return &XadminPermissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *XadminPermissionClient) UpdateOneID(id int) *XadminPermissionUpdateOne {
	mutation := newXadminPermissionMutation(c.config, OpUpdateOne, withXadminPermissionID(id))
	return &XadminPermissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for XadminPermission.
func (c *XadminPermissionClient) Delete() *XadminPermissionDelete {
	mutation := newXadminPermissionMutation(c.config, OpDelete)
	return &XadminPermissionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *XadminPermissionClient) DeleteOne(xp *XadminPermission) *XadminPermissionDeleteOne {
	return c.DeleteOneID(xp.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *XadminPermissionClient) DeleteOneID(id int) *XadminPermissionDeleteOne {
	builder := c.Delete().Where(xadminpermission.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &XadminPermissionDeleteOne{builder}
}

// Query returns a query builder for XadminPermission.
func (c *XadminPermissionClient) Query() *XadminPermissionQuery {
	return &XadminPermissionQuery{
		config: c.config,
	}
}

// Get returns a XadminPermission entity by its id.
func (c *XadminPermissionClient) Get(ctx context.Context, id int) (*XadminPermission, error) {
	return c.Query().Where(xadminpermission.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *XadminPermissionClient) GetX(ctx context.Context, id int) *XadminPermission {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryContentType queries the ContentType edge of a XadminPermission.
func (c *XadminPermissionClient) QueryContentType(xp *XadminPermission) *XadminContenttypeQuery {
	query := &XadminContenttypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := xp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(xadminpermission.Table, xadminpermission.FieldID, id),
			sqlgraph.To(xadmincontenttype.Table, xadmincontenttype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, xadminpermission.ContentTypeTable, xadminpermission.ContentTypeColumn),
		)
		fromV = sqlgraph.Neighbors(xp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUsers queries the users edge of a XadminPermission.
func (c *XadminPermissionClient) QueryUsers(xp *XadminPermission) *XadminUserQuery {
	query := &XadminUserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := xp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(xadminpermission.Table, xadminpermission.FieldID, id),
			sqlgraph.To(xadminuser.Table, xadminuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, xadminpermission.UsersTable, xadminpermission.UsersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(xp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoles queries the roles edge of a XadminPermission.
func (c *XadminPermissionClient) QueryRoles(xp *XadminPermission) *XadminRoleQuery {
	query := &XadminRoleQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := xp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(xadminpermission.Table, xadminpermission.FieldID, id),
			sqlgraph.To(xadminrole.Table, xadminrole.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, xadminpermission.RolesTable, xadminpermission.RolesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(xp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *XadminPermissionClient) Hooks() []Hook {
	return c.hooks.XadminPermission
}

// XadminRoleClient is a client for the XadminRole schema.
type XadminRoleClient struct {
	config
}

// NewXadminRoleClient returns a client for the XadminRole from the given config.
func NewXadminRoleClient(c config) *XadminRoleClient {
	return &XadminRoleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `xadminrole.Hooks(f(g(h())))`.
func (c *XadminRoleClient) Use(hooks ...Hook) {
	c.hooks.XadminRole = append(c.hooks.XadminRole, hooks...)
}

// Create returns a create builder for XadminRole.
func (c *XadminRoleClient) Create() *XadminRoleCreate {
	mutation := newXadminRoleMutation(c.config, OpCreate)
	return &XadminRoleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of XadminRole entities.
func (c *XadminRoleClient) CreateBulk(builders ...*XadminRoleCreate) *XadminRoleCreateBulk {
	return &XadminRoleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for XadminRole.
func (c *XadminRoleClient) Update() *XadminRoleUpdate {
	mutation := newXadminRoleMutation(c.config, OpUpdate)
	return &XadminRoleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *XadminRoleClient) UpdateOne(xr *XadminRole) *XadminRoleUpdateOne {
	mutation := newXadminRoleMutation(c.config, OpUpdateOne, withXadminRole(xr))
	return &XadminRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *XadminRoleClient) UpdateOneID(id int) *XadminRoleUpdateOne {
	mutation := newXadminRoleMutation(c.config, OpUpdateOne, withXadminRoleID(id))
	return &XadminRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for XadminRole.
func (c *XadminRoleClient) Delete() *XadminRoleDelete {
	mutation := newXadminRoleMutation(c.config, OpDelete)
	return &XadminRoleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *XadminRoleClient) DeleteOne(xr *XadminRole) *XadminRoleDeleteOne {
	return c.DeleteOneID(xr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *XadminRoleClient) DeleteOneID(id int) *XadminRoleDeleteOne {
	builder := c.Delete().Where(xadminrole.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &XadminRoleDeleteOne{builder}
}

// Query returns a query builder for XadminRole.
func (c *XadminRoleClient) Query() *XadminRoleQuery {
	return &XadminRoleQuery{
		config: c.config,
	}
}

// Get returns a XadminRole entity by its id.
func (c *XadminRoleClient) Get(ctx context.Context, id int) (*XadminRole, error) {
	return c.Query().Where(xadminrole.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *XadminRoleClient) GetX(ctx context.Context, id int) *XadminRole {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUsers queries the users edge of a XadminRole.
func (c *XadminRoleClient) QueryUsers(xr *XadminRole) *XadminUserQuery {
	query := &XadminUserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := xr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(xadminrole.Table, xadminrole.FieldID, id),
			sqlgraph.To(xadminuser.Table, xadminuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, xadminrole.UsersTable, xadminrole.UsersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(xr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPermissions queries the permissions edge of a XadminRole.
func (c *XadminRoleClient) QueryPermissions(xr *XadminRole) *XadminPermissionQuery {
	query := &XadminPermissionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := xr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(xadminrole.Table, xadminrole.FieldID, id),
			sqlgraph.To(xadminpermission.Table, xadminpermission.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, xadminrole.PermissionsTable, xadminrole.PermissionsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(xr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *XadminRoleClient) Hooks() []Hook {
	return c.hooks.XadminRole
}

// XadminUserClient is a client for the XadminUser schema.
type XadminUserClient struct {
	config
}

// NewXadminUserClient returns a client for the XadminUser from the given config.
func NewXadminUserClient(c config) *XadminUserClient {
	return &XadminUserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `xadminuser.Hooks(f(g(h())))`.
func (c *XadminUserClient) Use(hooks ...Hook) {
	c.hooks.XadminUser = append(c.hooks.XadminUser, hooks...)
}

// Create returns a create builder for XadminUser.
func (c *XadminUserClient) Create() *XadminUserCreate {
	mutation := newXadminUserMutation(c.config, OpCreate)
	return &XadminUserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of XadminUser entities.
func (c *XadminUserClient) CreateBulk(builders ...*XadminUserCreate) *XadminUserCreateBulk {
	return &XadminUserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for XadminUser.
func (c *XadminUserClient) Update() *XadminUserUpdate {
	mutation := newXadminUserMutation(c.config, OpUpdate)
	return &XadminUserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *XadminUserClient) UpdateOne(xu *XadminUser) *XadminUserUpdateOne {
	mutation := newXadminUserMutation(c.config, OpUpdateOne, withXadminUser(xu))
	return &XadminUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *XadminUserClient) UpdateOneID(id int) *XadminUserUpdateOne {
	mutation := newXadminUserMutation(c.config, OpUpdateOne, withXadminUserID(id))
	return &XadminUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for XadminUser.
func (c *XadminUserClient) Delete() *XadminUserDelete {
	mutation := newXadminUserMutation(c.config, OpDelete)
	return &XadminUserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *XadminUserClient) DeleteOne(xu *XadminUser) *XadminUserDeleteOne {
	return c.DeleteOneID(xu.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *XadminUserClient) DeleteOneID(id int) *XadminUserDeleteOne {
	builder := c.Delete().Where(xadminuser.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &XadminUserDeleteOne{builder}
}

// Query returns a query builder for XadminUser.
func (c *XadminUserClient) Query() *XadminUserQuery {
	return &XadminUserQuery{
		config: c.config,
	}
}

// Get returns a XadminUser entity by its id.
func (c *XadminUserClient) Get(ctx context.Context, id int) (*XadminUser, error) {
	return c.Query().Where(xadminuser.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *XadminUserClient) GetX(ctx context.Context, id int) *XadminUser {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRoles queries the roles edge of a XadminUser.
func (c *XadminUserClient) QueryRoles(xu *XadminUser) *XadminRoleQuery {
	query := &XadminRoleQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := xu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(xadminuser.Table, xadminuser.FieldID, id),
			sqlgraph.To(xadminrole.Table, xadminrole.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, xadminuser.RolesTable, xadminuser.RolesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(xu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPermissions queries the permissions edge of a XadminUser.
func (c *XadminUserClient) QueryPermissions(xu *XadminUser) *XadminPermissionQuery {
	query := &XadminPermissionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := xu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(xadminuser.Table, xadminuser.FieldID, id),
			sqlgraph.To(xadminpermission.Table, xadminpermission.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, xadminuser.PermissionsTable, xadminuser.PermissionsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(xu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *XadminUserClient) Hooks() []Hook {
	return c.hooks.XadminUser
}
